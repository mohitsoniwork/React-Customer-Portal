@RestResource(urlMapping='/rportal/*')
    global with sharing class ReactPortalRestResource {
        
        @HttpGet
        global static void getDetails() {
            
            Map<String, String> paramsMap = RestContext.request.params;
            String contactId = paramsMap.get('contactId');
            String carrierId = paramsMap.get('carrierId');
            String operations = paramsMap.get('operations'); // Operations could be activemembership, openTickets , complianceChallenge etc
            String type = paramsMap.get('type'); // type could be full or Individual
            String SearchTerm = paramsMap.get('SearchTerm'); //Homesearch Bar Search term 
            String embarkId = paramsMap.get('embarkId');
            String recordId = paramsMap.get('recordId');
            
            Object result = null;
            
            if (operations == 'activeMembership') {
                result = (Object) allActiveMembership(contactId, type);
            } else if (operations == 'contactNameandParentandRelatedAccount') {
                result = (Object) ContactNameandParentandRelatedAccount(contactId, type);
            } else if (operations == 'openTickets') {
                result = (Object) allOpenTickets(contactId, type);
            } else if (operations == 'complianceChallenge') {
                result = (Object) allComplianceChallenges(contactId, type);
            } else if (operations == 'ticketWinRate') {
                result = (Object) allYourTicketWinRate(contactId, type);
            } else if (operations == 'violations60days') {
                result = (Object) violations60days(contactId, type);
            } else if (operations == 'violationsRollingOff') {
                result = (Object) allViolationsRollingOff(contactId, type);
            } else if (operations == 'cleanInspections60days') {
                result = (Object) allCurrentViolationsWithBasicCheck(contactId, type);
            } else if (operations == 'basicsAlert') {
                result = (Object) allBASICsAlert(contactId, type);
            } else if (operations == 'basicsUnsafeDriving') {
                result = (Object) BASICsUnsafeDriving(contactId, type);
            } else if (operations == 'basicsDriverFitness') {
                result = (Object) BASICsDriverFitness(contactId, type);
            } else if (operations == 'basicsControlledSubstance') {
                result = (Object) BASICsControlledSubstance(contactId, type);
            } else if (operations == 'issScoreThisWeek') {
                result = (Object) ISSscoreThisWeek(contactId, type);
            } else if (operations == 'basicsVehicleMaintenance') {
                result = (Object) BASICsVehicleMaintenance(contactId, type);
            } else if (operations == 'basicsHoursOfService') {
                result = (Object) BASICsHoursOfService(contactId, type);
            } else if (operations == 'basicsCrashIndicator') {
                result = (Object) BASICsCrashIndicator(contactId, type);
            } else if (operations == 'ISSscore') {
                result = (Object) ISSscore(contactId, type);
            } else if (operations == 'activeDrivers') {
                result = (Object) getActiveDrivers(contactId, type);
            } else if (operations == 'inactiveDrivers') {
                result = (Object) getInactiveDrivers(contactId, type);
            } else if (operations == 'recentDrivers') {
                result = (Object) getRecentAccounts(contactId, type);
            } else if (operations == 'allDrivers') {
                result = (Object) getAllDrivers(contactId, type);
            } else if (operations == 'mcallenAccounts') {
                result = (Object) getAccountsNeedingHuntedMcAllen(contactId, type);
            } else if (operations == 'dfwAccounts') {
                result = (Object) getAccountsNeedingHuntedDFW(contactId, type);
            } else if (operations == 'expiredDrivers') {
                result = (Object) getDriversExpired(contactId, type);
            } else if (operations == 'openTicketsList') {
                result = (Object) getOpenTickets(contactId, type);
            } else if (operations == 'finesUnpaidTicketsList') {
                result = (Object) getFinesUnpaidTickets(contactId, type);
            } else if (operations == 'upcomingTicketsList') {
                result = (Object) getUpcomingTickets(contactId, type);
            } else if (operations == 'closedTicketsList') {
                result = (Object) getClosedTickets(contactId, type);
            } else if (operations == 'recentTicketsList') {
                result = (Object) getRecentTickets(contactId, type);
            } else if (operations == 'challengesOpen') {
                result = (Object) getOpenChallenges(contactId, type);
            } else if (operations == 'challengesRecent') {
                result = (Object) getRecentChallenges(contactId, type);
            } else if (operations == 'challengesOR') {
                result = (Object) getORiellyChallenges(contactId, type);
            } else if (operations == 'challengesDataQ') {
                result = (Object) getDataQEnteredChallenges(contactId, type);
            } else if (operations == 'challengesClosed') {
                result = (Object) getClosedChallenges(contactId, type);
            } else if (operations == 'challengesAwaitingFine') {
                result = (Object) getAwaitingFinesPaidChallenges(contactId, type);
            } else if (operations == 'challengesAll') {
                result = (Object) getAllChallenges(contactId, type);
            } else if (operations == 'smsPointsBasic') {
                result = (Object) getSMSPointsBasic(contactId, type);
            } else if (operations == 'smsPointsBasicByState') {
                result = (Object) getSMSPointsBasicByState(contactId, type);
            } else if (operations == 'basicViolations') {
                result = (Object) getBasicViolations(contactId, type);
            } else if (operations == 'unsafeDrivingViolations') {
                result = (Object) getUnsafeDrivingViolations(contactId, type);
            } else if (operations == 'vehicleMaintenanceViolations') {
                result = (Object) getVehicleMaintenanceViolations(contactId, type);
            } else if (operations == 'hoursOfServiceViolations') {
                result = (Object) getHoursOfServiceViolations(contactId, type);
            } else if (operations == 'driverFitnessViolations') {
                result = (Object) getDriverFitnessViolations(contactId, type);
            } else if (operations == 'mySMSDataSummary') {
                result = (Object) mySMSDataSummary(contactId, type);
            } else if (operations == 'mySMSDataInspectionsAll') {
                result = (Object) mySMSDataInspectionsAll(contactId, type);
            } else if (operations == 'mySMSDataInspectionsInspect') {
                result = (Object) mySMSDataInspectionsInspect(contactId, type);
            } else if (operations == 'mySMSDataInspectionswithoutDriver') {
                result = (Object) MySMSDataInspectionswithoutDriver(contactId, type);
            } else if (operations == 'mySMSDataInspectionsRecent') {
                result = (Object) MySMSDataInspectionsRecent(contactId, type);
            } else if (operations == 'mySMSDataViolationAll') {
                result = (Object) MySMSDataViolationAll(contactId, type);
            } else if (operations == 'mySMSDataViolationRecent') {
                result = (Object) MySMSDataViolationRecent(contactId, type);
            } else if (operations == 'smsNotificationToday') {
                result = (Object) SMSNotifyNotificationToday(contactId, type);
            } else if (operations == 'smsNotification7days') {
                result = (Object) SMSNotifyNotification7days(contactId, type);
            } else if (operations == 'smsCleanNotification7days') {
                result = (Object) SMSNotifyCleanNotification7days(contactId, type);
            } else if (operations == 'smsNotification30days') {
                result = (Object) SMSNotifyNotification30days(contactId, type);
            } else if (operations == 'smsCommonOffense90days') {
                result = (Object) SMSNotifyCommonOffense90days(contactId, type);
            } else if (operations == 'smsCommonOffenders') {
                result = (Object) SMSNotifyCommonOffenders(contactId, type);
            } else if (operations == 'smsInspection') {
                result = (Object) SMSNotifyInspection(contactId, type);
            } else if (operations == 'smsCrashDetails') {
                result = (Object) SMSNotifyCrashDetails(contactId, type);
            } else if (operations == 'mvrReport') {
                result = (Object) MVRReports(contactId, type);
            } else if (operations == 'mvrReportToday') {
                result = (Object) MVRReportsToday(contactId, type);
            } else if (operations == 'mvrBatch') {
                result = (Object) MVRBatches(contactId, type);
            } else if (operations == 'mvrBatchInProcess') {
                result = (Object) MVRBatchesInProcess(contactId, type);
            } else if (operations == 'addDriver_findRelatedDrivers') {
                result = (Object) getDriverData();
            } else if (operations == 'homeSearchBar') {
                result = (Object) homeSearchBar(SearchTerm);
            } else if (operations == 'driverLookup') {
                result = (Object) driverLookup(contactId, type);
            } else if (operations == 'user') {
                result = (Object) getUserByContactId(contactId);
            } else if (operations == 'getRelatedList') {
                result = (Object) getRelatedLists(contactId);
            } else if (operations == 'updateUser') {
                updateUserAlias(contactId);
            }	else if(operations == 'mvrReportSystem'){
                // RestResourceCaller.callRestResource();
            } else if (operations == 'mvrBatchRecord') {
                result = (Object) getMVRBatchRecord(recordId);
            } else if (operations == 'mvrReportRecord') {
                result = (Object) getMVRReportRecord(recordId);
            } else if (operations == 'getMVRReportsOfMVRBatch') {
                result = (Object) getMVRReportsOfMVRBatch(contactId);
            } else if (operations == 'getTicketDetailPage') {
                result = (Object) getTicketDetailPage(recordId);
            } else if (operations == 'getDriverDetailPage') {
                result = (Object) getDriverDetailPage(recordId);
            } else if (operations == 'getSMSNotifyDetailPage') {
                result = (Object) getSMSNotifyDetailPage(recordId);
            } else if (operations == 'getSMSInspectionDataDetailPage') {
                result = (Object) getSMSInspectionDataDetailPage(recordId);
            } else if (operations == 'getViolationDataDetailPage') {
                result = (Object) getViolationDataDetailPage(recordId);
            } else if (operations == 'getInspectionDetailPage') {
                result = (Object) getInspectionDetailPage(recordId);
            } else if (operations == 'getCarrierDetailPage') {
                result = (Object) getCarrierDetailPage(recordId);
            } else if (operations == 'getMVRReportDetailPage') {
                result = (Object) getMVRReportDetailPage(recordId);
            } else if (operations == 'getMVRRequestDetailPage') {
                result = (Object) getMVRRequestDetailPage(recordId);
            } else if (operations == 'getAccountRelatedListRecords') {
                result = (Object) getAccountRelatedListRecords(recordId);
            } else if (operations == 'getMVRReportRelatedListRecords') {
                result = (Object) getMVRReportRelatedListRecords(recordId);
            } else if (operations == 'getMVRRequestRelatedListRecords') {
                result = (Object) getMVRRequestRelatedListRecords(recordId);
            } else if (operations == 'getTicketRelatedListRecords') {
                result = (Object) getTicketRelatedListRecords(recordId);
            } else if (operations == 'getSMSInspectionDataRelatedListRecords') {
                result = (Object) getSMSInspectionDataRelatedListRecords(recordId);
            } else if (operations == 'getDriverRelatedListRecords') {
                result = (Object) getDriverRelatedListRecords(recordId);
            }else if (operations == 'getMvrPdf') {
                
                String base64String = getMvrPdf(embarkId);
                
                Map<String, Object> response = new Map<String, Object>();
                System.debug(base64String);
                if (base64String != null) {
                    response.put('fileBase64', base64String);
                    Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                    Logger.saveLog();
                } else {
                    RestContext.response.statusCode = 400;
                    response.put('error', new Map<String, Object> {'code' => 'NOT_FOUND', 'message' => 'File not found!'});
                    Logger.error('File not found!').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                    Logger.saveLog();
                }
                result = (Object) response;
            } else {
                result = '{ /n' + 
                    '   "error": {' +
                    '       "code": "INVALID_REQUEST",' +
                    '       "message": "The request contains invalid operation: \'' + operations + '\'' +
                    '   }'+
                    '}';
                RestContext.response.statusCode = 400;
            }
            
            
            RestContext.response.addHeader('Content-Type', 'application/json');
            RestContext.response.responseBody = Blob.valueOf(JSON.serialize(result));
            
        }
        
        @testVisible
        private static List<Embark_MVR__c> getMVRReportRecord(String recordId) {
            List<Embark_MVR__c> result = new List<Embark_MVR__c>();
            try {
                Id checkObject = (Id) recordId;
                result = [SELECT Id, OwnerId, IsDeleted, Name, CreatedDate, CreatedBy.Name, LastModifiedDate, LastModifiedBy.Name, SystemModstamp, LastActivityDate, LastViewedDate, LastReferencedDate, Contact__r.Name, Driver__r.Name, Embark_Id__c, History_Info__c, JSON_Response__c, MVR_Request__c, Message__c, Opportunity__r.Name, Status__c, Type__c, Driver_State__c, Carrier_from_Opp__c, Notification_Sent__c, Carrier_Current_or_Previous__c, Carrier_From_Driver__c, Times_Moved_to_New_MVR_Batch__c, MVR_Status__c, Driver_Has_Embark_Employee_Id__c FROM Embark_MVR__c WHERE Id =:recordId LIMIT 1];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return result;
        }
        
        @testVisible
        private static List<MVR_Request__c> getMVRBatchRecord(String recordId) {
            List<MVR_Request__c> result = new List<MVR_Request__c>();
            try {
                result = [SELECT Id, OwnerId, IsDeleted, Name, CreatedDate, CreatedBy.Name, LastModifiedDate, LastModifiedBy.Name, SystemModstamp, LastActivityDate, LastViewedDate, LastReferencedDate, Carrier__r.Name, Opportunity__r.Name, Scheduled_Pull_Date__c, Number_of_Completed_MVR_Reports__c, Number_of_MVR_Reports__c, Status__c, Number_of_MVR_Reports_In_Progress__c FROM MVR_Request__c WHERE Id =:recordId LIMIT 1];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return result;
        }
        
        
        @HTTPPost
        global static void postDetails() {
            
            System.debug('inside post request');
            Map<String, String> paramMap = RestContext.request.params;
            Map<String, Object> result = new Map<String, Object>();
            String body = '';
            String recordId = paramMap.get('contactId');
            String operations = paramMap.get('operations');
            Boolean apiException = false;
            
            switch on operations {
                when 'addDriver' {
                    result = addDriver(recordId, RestContext.request.requestBody.toString());
                    if (result.containsKey('exception')) {
                        apiException = true;
                        result.remove('exception');
                    }
                    System.debug(result);
                }
                when 'createCase' {
                    result = createCase(RestContext.request.requestBody.toString());
                    if (result.containsKey('exception')) {
                        apiException = true;
                        result.remove('exception');
                    }
                    System.debug(result);
                }
                when 'createSignedDocumentLink' {
                    result = createSignedDocumentLink(RestContext.request.requestBody.toString());
                    if (result.containsKey('exception')) {
                        apiException = true; 
                        result.remove('exception');
                    }
                    System.debug(result);
                }	
                when 'cancelAccountMembership'{
                    result = cancelAccountMembership(RestContext.request.requestBody.toString());
                    if (result.containsKey('exception')) {
                        apiException = true;
                        result.remove('exception');
                    }
                    System.debug(result);
                }
                  when 'requestmvr'{
                    result = requestmvr(RestContext.request.requestBody.toString());
                    if (result.containsKey('exception')) {
                        apiException = true;
                        result.remove('exception');
                    }
                    System.debug(result);
                  } when 'deleteTickets' {
                      result = deleteTickets(RestContext.request.requestBody.toString());
                        if (result.containsKey('exception')) {
                        apiException = true;
                        result.remove('exception');
                        }
                      System.debug(result);
                    
                  } when else {
                    body = '{' + 
                        '   "error": {' +
                        '       "code": "INVALID_REQUEST",' +
                        '       "message": "The request contains invalid operation: \'' + operations + '\'' +
                        '   }'+
                        '}';
                    RestContext.response.statusCode = 400;
                }
            }
            if (apiException == true) RestContext.response.statusCode = 400;
            RestContext.response.responseBody = Blob.valueOf(JSON.serialize(result));
        }
        
        
        
        public static Map<String, Object> addDriver(String recordId, String json) {
            Map<String, Object> result = new Map<String, Object>();
            Map<String, Object> parsedJSON = (Map<String, Object>) System.JSON.deserializeUntyped(json);
            
            System.debug('parsedJSON => ' + System.JSON.serializePretty(parsedJSON));
            
            try {
                
                User userRecord = null;
                Id personAccountTypeId = [SELECT Id FROM RecordType WHERE sObjectType = 'Account' and DeveloperName = 'PersonAccount' LIMIT 1].Id;
                
                Account accountToUpsert = new Account();
                
                if (!parsedJSON.containsKey('isDriverSignup')) {
                    
                    if (parsedJSON.containsKey('portalUserId')) {
                        userRecord = [SELECT Id, AccountId FROM User WHERE ContactId =: (String) parsedJSON.get('portalUserId') LIMIT 1];
                    }

                    Account userAccount = [SELECT Hunter__c, OwnerId, Payer__c FROM Account WHERE Id =: userRecord.AccountId limit 1];
                    
                    accountToUpsert.Active_Inactive__c = 'Pending';
                    accountToUpsert.Lead_Source_Global__c = 'Carrier';
                    accountToUpsert.CDL_Number__c = (String) parsedJSON.get('cdlNumber');
                    accountToUpsert.CDL_State__c = (String) parsedJSON.get('cdlState');
                    accountToUpsert.FirstName = (String) parsedJSON.get('driverFirstName');
                    accountToUpsert.LastName = (String) parsedJSON.get('driverLastName');
                    accountToUpsert.PersonEmail = (String) parsedJSON.get('driverEmail');
                    accountToUpsert.PersonMobilePhone = (String) parsedJSON.get('driverPhone');
                    //accountToUpsert.OwnerId = userRecord.Id; 
                    accountToUpsert.RecordTypeId = personAccountTypeId;
                    accountToUpsert.Hunter__c = (userAccount.Hunter__c != null) ? userAccount.Hunter__c : userAccount.OwnerId;
                    //Updatd ownerid assignment
                    accountToUpsert.OwnerId = (userAccount.OwnerId != null) ? userAccount.OwnerId : userRecord.Id;
                    accountToUpsert.Payer__c = userAccount.Payer__c;
                    accountToUpsert.Roles__pc = 'Driver';
                    
                    
                    // pending to assign hunter field Hunter__c. -- done
                    // pending check OwnerId formula once again. -- updated
                    // pending Payer__c
                    
                    if (parsedJSON.containsKey('carrierId')) {
                        accountToUpsert.Carrier__c = (String) parsedJSON.get('carrierId');
                    }
                    
                    if (parsedJSON.containsKey('carrierDriverId')) {
                        accountToUpsert.Carrier_s_Driver_Id__c = (String) parsedJSON.get('carrierDriverId');
                    }
                    
                    if (parsedJSON.containsKey('socialSecurityNumber')) {
                        accountToUpsert.Last_4_of_SS__c = (String) parsedJSON.get('socialSecurity');
                    }
                    
                    // if (parsedJSON.containsKey('dob')) {
                    //     accountToUpsert.PersonBirthdate = Date.parse((String) parsedJSON.get('dob'));
                    // }
                    
                    if (parsedJSON.containsKey('address')) {
                        
                        Map<String, Object> address = (Map<String, Object>) parsedJSON.get('address');
                        
                        if (address.containsKey('street')) {
                            accountToUpsert.PersonMailingStreet = (String) address.get('street');
                        }
                        
                        if (address.containsKey('city')) {
                            accountToUpsert.PersonMailingCity = (String) address.get('city');
                        }
                        
                        if (address.containsKey('state-province')) {
                            accountToUpsert.PersonMailingState = (String) address.get('state-province');
                        }
                        
                        if (address.containsKey('zip-postal-code')) {
                            accountToUpsert.PersonMailingPostalCode = (String) address.get('zip-postal-code');
                        }
                    }
                    
                    if (parsedJSON.containsKey('existingDriverId')) {
                        accountToUpsert.Id = (String) parsedJSON.get('existingDriverId');
                        update accountToUpsert;
                        result.put('code', 'UPDATE_SUCCESS');
                        result.put('message', 'Driver has been updated successfully!');
                        Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    } else {
                        insert accountToUpsert;
                        result.put('code', 'INSERT_SUCCESS');
                        result.put('message', 'Driver has been saved successfully!');
                        Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    }
                } else {
                    
                    Map<String, Object> params = new Map<String, Object>();

                    // required fields
                    params.put('input_FirstName', parsedJSON.get('driverFirstName'));
                    params.put('input_LastName', parsedJSON.get('driverLastName'));
                    params.put('input_Phone', parsedJSON.get('driverPhone'));
                    params.put('input_Email', parsedJSON.get('driverEmail'));
                    params.put('input_EntryDate', Date.today());

                    // not required fields

                    if (validateStringKey(parsedJSON, 'cdlState')) {
                        params.put('input_CDLState', parsedJSON.get('cdlState'));
                    }

                    if (validateStringKey(parsedJSON, 'cdlNumber')) {
                        params.put('input_CDLNumber', parsedJSON.get('cdlNumber'));
                    }

                    if (validateStringKey(parsedJSON, 'personDriverId')) {
                        params.put('input_PersonalDriverID', parsedJSON.get('personDriverId'));
                    }

                    if (validateStringKey(parsedJSON, 'salesRepId')) {
                        params.put('input_SalesRepID', parsedJSON.get('salesRepId'));
                    }
                    
                    if (validateStringKey(parsedJSON, 'carrierId')) {
                        params.put('input_CarrierSFID', parsedJSON.get('carrierId'));
                    }

                    if (validateStringKey(parsedJSON, 'billingFrequency') && validateDecimalKey(parsedJSON, 'amount')) {
                        
                        Decimal monthlyPrice = (Decimal) parsedJSON.get('amount') / 100.00;
                        Decimal discountedPrice = monthlyPrice;

                        if (parsedJSON.get('billingFrequency') != 'Monthly') {
                            discountedPrice = parsedJSON.get('billingFrequency') == 'Quarterly' 
                                                    ? monthlyPrice * 2.54       // discounted price of quarterly billing frequency 
                                                    : monthlyPrice * 10;        // discounted price of annual billing frequency
                        }

                        params.put('input_BillingFrequency', parsedJSON.get('billingFrequency'));   
                        params.put('input_MonthlyPrice', monthlyPrice);
                        params.put('input_TotalAmountBasedOnBillingFrequency', discountedPrice);
                    }

                    if (validateStringKey(parsedJSON, 'spouseFirstName')) {
                        params.put('input_SpouseFirstName', parsedJSON.get('spouseFirstName'));
                    }

                    if (validateStringKey(parsedJSON, 'spouseLastName')) {
                        params.put('input_SpouseLastName', parsedJSON.get('spouseLastName'));
                    }
                    
                    Flow.Interview.Driver_Signup_Handler_New_Driver_Signature zap = new Flow.Interview.Driver_Signup_Handler_New_Driver_Signature(params);
                    zap.start();
                    
                    String driverId = (String) zap.getVariableValue('var_driverRecordId');
                    String caseId = (String) zap.getVariableValue('out_caseId');
                    
                    if ((driverId == null || String.isBlank(driverId)) && (caseId != null || String.isNotBlank(caseId))) {

                        Case faultCase = [SELECT Id, CaseNumber FROM Case WHERE Id =: caseId LIMIT 1];
                        String message = 'Signup failed! Please contact the site administrator with the following case ID: [' + faultCase.CaseNumber + ']';
                        
                        result.put('exception', true);
                        result.put('code', 'SAVE_OPERATION_FAILED');
                        result.put('message', message);

                    } else {

                        result.put('code', 'INSERT_SUCCESS');
                        result.put('message', 'Driver has been saved successfully!');

                    }
					
                    System.debug('hello, world!');
                }

                Logger.info('Request Successfull (Driver Signup)').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            } catch (QueryException qe){
                
                system.debug('Error occurred: ' + qe.getMessage());

                result.put('exception', true);
                result.put('code', 'SAVE_OPERATION_FAILED');

                String faultCaseNumber = createApexFaultCase(parsedJSON, 'Apex Fault: ' + qe.getMessage() + ' ' + qe.getStackTraceString());

                if (faultCaseNumber != null && String.isNotBlank(faultCaseNumber)) {
                    String message = 'Signup failed! Please contact the site administrator with the following case ID: [' + faultCaseNumber + ']';
                    result.put('message', message);
                } else {
                    result.put('message', 'Something went wrong while adding driver, Please contact to administrator.');
                }

                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();

            }

            return result;
        }
        
        private static Boolean validateStringKey(Map<String, Object> data, String keyname) {
            if (data.containsKey(keyname) && String.valueOf(data.get(keyname)) != null && String.isNotBlank(String.valueOf(data.get(keyname)))) return true;
            return false;
        }
        
        private static Boolean validateDecimalKey(Map<String, Object> data, String keyname) {
            if (data.containsKey(keyname) && data.get(keyname) != null) return true;
            return false;
        }
        
        
        @TestVisible
        private static String createApexFaultCase(Map<String, Object> parsedJSON, String apexFaultMessage) {
            if (parsedJSON.containsKey('isDriverSignup')) {

                String firstName = getValueOrDefault(parsedJSON, 'driverFirstName', '--');
				String lastName = getValueOrDefault(parsedJSON, 'driverLastName', '--');
				String email = getValueOrDefault(parsedJSON, 'driverEmail', '--');
				String phone = getValueOrDefault(parsedJSON, 'driverPhone', '--');
				String spouseFirstName = getValueOrDefault(parsedJSON, 'spouseFirstName', '-');
				String spouseLastName = getValueOrDefault(parsedJSON, 'spouseLastName', '-');
				String spouseName = spouseFirstName + ' ' + spouseLastName;
				String billingFrequency = getValueOrDefault(parsedJSON, 'billingFrequency', '--');
				String cdlState = getValueOrDefault(parsedJSON, 'cdlState', '--');
				String cdlNumber = getValueOrDefault(parsedJSON, 'cdlNumber', '--');
				String carrierSFID = getValueOrDefault(parsedJSON, 'carrierId', '--');
				String salesRepID = getValueOrDefault(parsedJSON, 'salesRepId', '--');
                String personalDriverId = getValueOrDefault(parsedJSON, 'personDriverId', '--');

                String monthlyPrice = (parsedJSON.containsKey('amount') && parsedJSON.get('amount') != null) 
                                    ? String.valueOf(parsedJSON.get('amount')) : '--';
				String discountedAmount = (parsedJSON.containsKey('amount') && parsedJSON.get('amount') != null && parsedJSON.containsKey('billingFrequency') && (parsedJSON.get('billingFrequency') != null || String.isNotBlank((String)parsedJSON.get('billingFrequency'))))
                                            ? String.valueOf(
                                                parsedJSON.get('billingFrequency') == 'Quarterly'
                                                ? ((Decimal) parsedJSON.get('amount') * 100) * 2.24
                                                : parsedJSON.get('billingFrequency') == 'Annual'
                                                ? ((Decimal)parsedJSON.get('amount') * 100) * 10
                                                : (Decimal)parsedJSON.get('amount') * 100
                                              ): '--';
                
                String description = 'Fault Element: ' + apexFaultMessage + '\n' +
                firstName + ' ' + lastName + ' has signed up with their ' + email + ' and ' + phone + ' number. Here are the additional details: \n' +
                'Spouse Name: ' + spouseName + '\n' +
                'Billing Frequency: ' + billingFrequency + '\n' +
                'Monthly Price: ' + monthlyPrice + '\n' +
                'Discounted Amount: ' + discountedAmount + '\n' +
                'CDL State: ' + cdlState + '\n' +
                'CDL Number: ' + cdlNumber + '\n' +
                'Carrier SFID: ' + carrierSFID + '\n' +
                'Sales Rep ID: ' + salesRepID + '\n' + 
                'Personal Driver Id: ' + personalDriverId;

                Id caseQueueId = [SELECT Id FROM Group WHERE Type = 'Queue' AND DeveloperName = 'Internal_Help' LIMIT 1].Id;

                Case apexFaultCase = new Case();
                apexFaultCase.Origin = 'Web';
                apexFaultCase.Priority = 'High';
                apexFaultCase.OwnerId = caseQueueId;
                apexFaultCase.Subject = firstName + ' ' + lastName + ' has signed up with their ' + email + ' and ' + phone + ' number.';

                INSERT apexFaultCase;
                
                return [SELECT Id, CaseNumber FROM Case WHERE Id =: apexFaultCase.Id LIMIT 1]?.CaseNumber;

            }

            return null;
        }

        private static String getValueOrDefault(Map<String, Object> jsonMap, String key, String defaultValue) {
            return jsonMap.containsKey(key) ? (String) jsonMap.get(key) : defaultValue;
        }
        
        
        public static Map<String, Object> createCase(String json) {
            Map<String, Object> result = new Map<String, Object>();
            
            try {
                //Id personAccountTypeId = [SELECT Id FROM RecordType WHERE sObjectType = 'Case' and DeveloperName = 'PersonAccount' LIMIT 1].Id;
                Map<String, Object> parsedJSON = (Map<String, Object>) System.JSON.deserializeUntyped(json);
                User user = null;
                
                System.debug('parsedJSON => ' + System.JSON.serializePretty(parsedJSON));
                //   if (parsedJSON.containsKey('portalUserId')) {
                String contactId = (String) parsedJSON.get('createdBy');
                
                system.debug('COntactId Main '+ contactId);
                
                user = [SELECT Id, Name, AccountId, ContactId FROM User WHERE ContactId =: contactId Limit 1];
                
                String caseSupportRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Case Support').getRecordTypeId();
                
                Id caseOwnerId;
                Group grp = [SELECT Id FROM Group WHERE DeveloperName = 'Case_to_Ticket' LIMIT 1];
                caseOwnerId = grp.Id;
                
                system.debug('user account ' + user.AccountId); 
                //  }
                
                //Checks for driver loopup
                if(parsedJSON.containsKey('driverId')){
                    Contact driverContact = [ SELECT Id, Name, AccountId, Account.Name, Account.Carrier__c, Account.PersonMobilePhone, Account.PersonEmail FROM Contact WHERE AccountId =: (String) parsedJSON.get('driverId') LIMIT 1];
                    Account userAccount = [SELECT Id, Name FROM Account WHERE Id =: user.AccountId LIMIT 1];
                                        
                    Case caseToInsert = new Case();
                    caseToInsert.AccountId = driverContact.Account.Carrier__c;
                    caseToInsert.Description = ('A Ticket and/or Inspection has been submitted by '  + 
                                                user.Name + ' from ' + driverContact.Account.Name );
                    caseToInsert.Origin = 'Web';
                    caseToInsert.OwnerId = caseOwnerId;
                    caseToInsert.Priority = 'Medium';
                    caseToInsert.RecordTypeId = caseSupportRecordTypeId;
                    caseToInsert.Status = 'New';
                    caseToInsert.Subject = 'New Ticket Submitted via Portal by ' + user.Name + ' from ' + userAccount.Name;//Not sure
                    caseToInsert.SuppliedEmail = driverContact.Account.PersonEmail;
                    caseToInsert.SuppliedName = driverContact.Account.Name;
                    caseToInsert.SuppliedPhone = driverContact.Account.PersonMobilePhone;
                    caseToInsert.Driver__c = driverContact.AccountId;
                    caseToInsert.ContactId = driverContact.Id;
                    caseToInsert.Portal_User_Reference__c = contactId;
                    
                    insert caseToInsert;
                    
                    
                    // Handle files
                    if (parsedJSON.containsKey('files')) {
                        List<Object> rawFiles = (List<Object>) parsedJSON.get('files');
                        List<Map<String, Object>> files = new List<Map<String, Object>>();
                        
                        if (rawFiles != null) {
                            for (Object rawFile : rawFiles) {
                                if (rawFile instanceof Map<String, Object>) {
                                    files.add((Map<String, Object>) rawFile);
                                }
                            }
                        }
                        
                        if (!files.isEmpty()) {
                            List<ContentVersion> contentVersions = new List<ContentVersion>();
                            
                            // Create ContentVersion records
                            for (Map<String, Object> file : files) {
                                String fileString = (String) file.get('VersionData');
                                Integer commaIndex = fileString.indexOf(',');
                                String updatedFileString = '';
                                if(commaIndex > 0){
                                    updatedFileString = fileString.subString(commaIndex + 1).trim();
                                }
                                ContentVersion contentVersion = new ContentVersion(
                                    Title = (String) file.get('Title'),
                                    PathOnClient = (String) file.get('PathOnClient'),
                                    VersionData = EncodingUtil.base64Decode(updatedFileString)
                                );
                                contentVersions.add(contentVersion);
                            }
                            insert contentVersions;
                            
                            // Create ContentDocumentLinks
                            List<ContentDocumentLink> contentDocumentLinks = new List<ContentDocumentLink>();
                            for (ContentVersion cv : [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id IN :contentVersions]) {
                                ContentDocumentLink link = new ContentDocumentLink(
                                    ContentDocumentId = cv.ContentDocumentId,
                                    LinkedEntityId = caseToInsert.Id,
                                    ShareType = 'V',
                                    Visibility = 'AllUsers'
                                );
                                contentDocumentLinks.add(link);
                            }
                            insert contentDocumentLinks;
                        }
                        
                        result.put('code', 'INSERT_SUCCESS');
                        result.put('message', 'Case have been saved successfully.');
                    }
                }
                else{
                    system.debug('USeraccount 111 '+ user.AccountId);
                    Id accId = user.AccountId;
                    List<Account> userAccount = [SELECT Id,Name FROM Account WHERE Id =: accId limit 1];
                    
                    //  String caseSupportRecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Case Support').getRecordTypeId();
                    //  Id caseOwnerId;
                    //  Group grp = [SELECT Id FROM Group WHERE DeveloperName = 'Case_to_Ticket' LIMIT 1];
                    //  caseOwnerId = grp.Id;
                    
                    
                    for(Account acc: userAccount){
                        system.debug('Account 111 : '+ acc );  
                        String Name = acc.Name;
                        
                        Case caseToInsert = new Case();
                        caseToInsert.AccountId = user.AccountId;
                        caseToInsert.Origin = 'Web';
                        caseToInsert.OwnerId = caseOwnerId;
                        caseToInsert.Priority = 'Medium';
                        caseToInsert.RecordTypeId = caseSupportRecordTypeId;
                        caseToInsert.Status = 'New';
                        caseToInsert.Subject = 'New Ticket Submitted via Portal by ' + user.Name + ' from ' + Name;
                        caseToInsert.SuppliedEmail = (String) parsedJSON.get('driverEmail');
                        caseToInsert.SuppliedName = ( (String) parsedJSON.get('driverFirstName') + ' ' + (String) parsedJSON.get('driverLastName') );
                        caseToInsert.SuppliedPhone = (String) parsedJSON.get('driverMobileNumber');
                        //caseToInsert.Driver__c = ''; //Not found
                        caseToInsert.Description = ('A Ticket and/or Inspection has been submitted by '  + 
                                                    user.Name + ' from ' + Name + '\n' +
                                                    'Driver Name: ' + ( (String) parsedJSON.get('driverFirstName') + ' ' + (String) parsedJSON.get('driverLastName') ) + '\n' +
                                                    'Driver\'s Mobile: ' + (String) parsedJSON.get('driverMobileNumber') + '\n' +
                                                    'Driver\'s Email: ' + (String) parsedJSON.get('driverEmail') );
                        caseToInsert.Portal_User_Reference__c = contactId;
                        insert caseToInsert;
                        system.debug('Case ID'+ caseToInsert.Id);
                        
                        // Handle files
                        if (parsedJSON.containsKey('files')) {
                            List<Object> rawFiles = (List<Object>) parsedJSON.get('files');
                            List<Map<String, Object>> files = new List<Map<String, Object>>();
                            
                            if (rawFiles != null) {
                                for (Object rawFile : rawFiles) {
                                    if (rawFile instanceof Map<String, Object>) {
                                        files.add((Map<String, Object>) rawFile);
                                    }
                                }
                            }
                            
                            if (!files.isEmpty()) {
                                List<ContentVersion> contentVersions = new List<ContentVersion>();
                                
                                // Create ContentVersion records
                                
                                for (Map<String, Object> file : files) {
                                    String fileString = (String) file.get('VersionData');
                                    Integer commaIndex = fileString.indexOf(',');
                                    String updatedFileString = '';
                                    if(commaIndex > 0){
                                        updatedFileString = fileString.subString(commaIndex + 1).trim();
                                    }
                                    ContentVersion contentVersion = new ContentVersion(
                                        Title = (String) file.get('Title'),
                                        PathOnClient = (String) file.get('PathOnClient'),
                                        VersionData = EncodingUtil.base64Decode(updatedFileString)
                                    );
                                    contentVersions.add(contentVersion);
                                }
                                
                                insert contentVersions;
                                system.debug('content version ID'+ contentVersion.Id);
                                
                                // Create ContentDocumentLinks
                                List<ContentDocumentLink> contentDocumentLinks = new List<ContentDocumentLink>();
                                for (ContentVersion cv : [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id IN :contentVersions]) {
                                    ContentDocumentLink link = new ContentDocumentLink(
                                        ContentDocumentId = cv.ContentDocumentId,
                                        LinkedEntityId = caseToInsert.Id,
                                        ShareType = 'V',
                                        Visibility = 'AllUsers'
                                    );
                                    contentDocumentLinks.add(link);
                                }
                                insert contentDocumentLinks;
                            }
                        }
                        
                        result.put('code', 'INSERT_SUCCESS');
                        result.put('message', 'Case have been saved successfully.');
                    }
                    Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                    Logger.saveLog();
                    return result;
                }}  catch (QueryException qe){
                    system.debug('Error occurred: ' + qe.getMessage());
                    Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                    Logger.saveLog();
                }
            return result;
        }
        
        public static Map<String, Object> createSignedDocumentLink(String json) {
            Map<String, Object> result = new Map<String, Object>();
            
            try {
                // Parse the incoming JSON
                Map<String, Object> parsedJSON = (Map<String, Object>) System.JSON.deserializeUntyped(json);
                
                System.debug('parsedJSON => ' + System.JSON.serializePretty(parsedJSON));
                
                // Initialize variables to store data from the parsed JSON
                String firstName = (String) parsedJSON.get('firstName');
                String lastName = (String) parsedJSON.get('lastName');
                String email = (String) parsedJSON.get('email');
                String phone = (String) parsedJSON.get('phone');
                String signatureBlobString = (String) parsedJSON.get('signatureBlobString');
                String processedDocument = (String) parsedJSON.get('processedDocument');
                
                // Validate essential fields
                if (String.isBlank(firstName) || String.isBlank(lastName) || String.isBlank(email)) {
                    Logger.error('First name / last name / email were missing.');
                    Logger.saveLog();
                    result.put('code', 'ERROR');
                    result.put('message', 'First name, last name, and email are required.');
                    return result;
                }
                
                
                // Create or update a Signed Document Link record
                contract_document_link__c signedDoc = new contract_document_link__c();
                signedDoc.First_Name__c = firstName;
                signedDoc.Last_Name__c = lastName;
                signedDoc.Email__c = email;
                signedDoc.Phone__c = phone;
                signedDoc.Signature_Blob__c = signatureBlobString;
                signedDoc.Document_Processed__c = processedDocument;
                signedDoc.Contract_Document__c = [SELECT Id from Contract_Document__c Where Name Like '%0001' LIMIT 1].Id;
                // signedDoc.Related_Record__c = recordId;
                
                if (parsedJSON.containsKey('existingDocumentId')) {
                    // Update existing Signed Document Link
                    signedDoc.Id = (String) parsedJSON.get('existingDocumentId');
                    update signedDoc;
                    result.put('code', 'UPDATE_SUCCESS');
                    result.put('message', 'Signed Document Link has been updated successfully!');
                } else {
                    // Insert new Signed Document Link
                    insert signedDoc;
                    result.put('code', 'INSERT_SUCCESS');
                    result.put('message', 'Signed Document Link has been created successfully!');
                    
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException: ' + qe.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'Error occurred while querying related records: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'Error occurred while performing DML operations: ' + de.getMessage());
                Logger.error(de.getMessage(), de).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception: ' + e.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'An unexpected error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return result;
        }
        
        public static Map<String, Object> cancelAccountMembership(String json) {
            Map<String, Object> result = new Map<String, Object>();
            
            try {
                // Parse the incoming JSON
                Map<String, Object> parsedJSON = (Map<String, Object>) System.JSON.deserializeUntyped(json);
                
                System.debug('parsedJSON => ' + System.JSON.serializePretty(parsedJSON));
                
                // Initialize variables to store data from the parsed JSON
                String accountId = (String) parsedJSON.get('accountId');
                String cancellationReason = (String) parsedJSON.get('cancellationReason');
                String cancellationDateString = (String) parsedJSON.get('cancellationDate'); // Read as String
                
                // Parse the date string to Date
                Date cancellationDate;
                if (!String.isBlank(cancellationDateString)) {
                    cancellationDate = Date.valueOf(cancellationDateString); // Parse the date
                }
                
                // Validate inputs
                if (String.isBlank(accountId) || String.isBlank(cancellationReason) || cancellationDate == null) {
                    result.put('code', 'ERROR');
                    result.put('message', 'accountId, cancellationReason, and cancellationDate are required.');
                    return result;
                }
                
                // Call the cancellation logic
                CDL_CancelMembership.cancelMembershipCommunity(accountId, cancellationReason, cancellationDate);
                
                result.put('code', 'UPDATE_SUCCESS');
                result.put('message', 'Membership has been cancelled successfully.');
                
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'Error occurred while performing DML operations: ' + de.getMessage());
            } catch (Exception e) {
                System.debug('Exception: ' + e.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'An unexpected error occurred: ' + e.getMessage());
            }
            
            return result;
        }
        
        public static Map<String,Object> requestMVR(String json){
            Map<String, Object> result = new Map<String, Object>();
              try {
                // Parse the incoming JSON
                Map<String, Object> parsedJSON = (Map<String, Object>) System.JSON.deserializeUntyped(json);
                
                System.debug('parsedJSON => ' + System.JSON.serializePretty(parsedJSON));
                
                // Initialize variables to store data from the parsed JSON
                String driverId = (String) parsedJSON.get('driverId');
                String userId = (String) parsedJSON.get('userId');
               
                 // Validate inputs
                if (String.isBlank(driverId) || String.isBlank(userId)  == null) {
                    result.put('code', 'ERROR');
                    result.put('message', 'driverId, userId are required.');
                    return result;
                }
                
              
                result.put('code', 'UPDATE_SUCCESS');
                result.put('message', 'MVR Request has been raised successfully');
                
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'Error occurred while performing DML operations: ' + de.getMessage());
            } catch (Exception e) {
                System.debug('Exception: ' + e.getMessage());
                result.put('code', 'ERROR');
                result.put('message', 'An unexpected error occurred: ' + e.getMessage());
            }
            
            return result;

            
        }
        
        
        public static Map<String, Object> deleteTickets(String json) {
            Map<String, Object> result = new Map<String, Object>();
            
            try {
                // Parse the incoming JSON
                Map<String, Object> parsedJSON = (Map<String, Object>) System.JSON.deserializeUntyped(json);
                
                System.debug('parsedJSON => ' + System.JSON.serializePretty(parsedJSON));
                
                // Extract request data
                String deleteRequestBy = (String) parsedJSON.get('deleteRequestBy');
                List<Object> ticketIds = (List<Object>) parsedJSON.get('ticketIds');
                logger.info('ticketIds'+ ticketIds);
                
                // Validate inputs
                if (String.isBlank(deleteRequestBy)) {
                    result.put('code', 'REQUEST_ERROR');
                    result.put('message', 'deleteRequestBy and ticketIds are required.');
                    return result;
                }
                
                // Convert ticket IDs to a Set of Ids
                Set<Id> ticketIdSet = new Set<Id>();
                for (Object ticketId : ticketIds) {
                    ticketIdSet.add((Id) ticketId);
                }
                
                // Query existing tickets to verify their existence
                List<Ticket__c> ticketsToDelete = [SELECT Id FROM Ticket__c WHERE Id IN :ticketIdSet];
                
                if (ticketsToDelete.isEmpty()) {
                    result.put('code', 'REQUEST_ERROR');
                    result.put('message', 'No matching tickets found for deletion.');
                    return result;
                }
                
                // Perform delete operation
                delete ticketsToDelete;
                
                result.put('code', 'DELETE_SUCCESS');
                result.put('message', 'Ticket(s) has been deleted successfully!');
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                result.put('code', 'REQUEST_ERROR');
                result.put('message', 'Something went wrong while deleting the ticket(s)!');
                Logger.error(de.getMessage(), de).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception: ' + e.getMessage());
                result.put('code', 'REQUEST_ERROR');
                result.put('message', 'An unexpected error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return result;
        }

        
        
        
        // Generic method
        private static Map<String, List<Account>> getParentAndRelatedAccounts(
            String contactId
        ) {
            Id checkObjectId = (Id) contactId;
            Id accountId = null;
            
            Map<String, List<Account>> accountMap = new Map<String, List<Account>>();
            
            List<Account> parentAccountList = new List<Account>();
            List<Account> relatedAccountsList = new List<Account>();
            if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                accountId = [
                    SELECT Id, AccountId
                    FROM Contact
                    WHERE Id = :contactId
                    WITH USER_MODE
                    LIMIT 1
                ]
                    ?.AccountId;
            } else {
                accountId = checkObjectId;
            }
            
            if (accountId != null) {
                Account parentAccount = [
                    SELECT Id
                    FROM Account
                    WHERE Id = :accountId
                    //AND Id IN (
                    //    SELECT AccountId
                    //   FROM AccountContactRelation
                    //    WHERE ContactId = :contactId 
                    //AND IsActive = true AND isdirect = true
                    
                    //   )
                    WITH USER_MODE
                    LIMIT 1
                ];
                if (parentAccount != null) {
                    relatedAccountsList = [
                        SELECT Id
                        FROM Account
                        WHERE ParentId = :parentAccount.Id
                        // AND Id IN (
                        //      SELECT AccountId
                        //      FROM AccountContactRelation
                        //      WHERE ContactId = :contactId AND IsActive = true AND isdirect = false
                        //  )
                        WITH USER_MODE
                    ];
                    parentAccountList.add(parentAccount);
                }
            }
            
            accountMap.put('parentAccount', parentAccountList);
            accountMap.put('relatedAccounts', relatedAccountsList);
            Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
            Logger.saveLog();
            
            return accountMap;
        }
        
        
        public static Map<String, List<String>> getRelatedLists(String contactId) {
            Map<String, List<String>> accessibleRelatedLists = new Map<String, List<String>>();
            
            try {
                // Convert the provided record ID to an Id object
                System.debug('contact id: ' + contactId);
                Id objectId = Id.valueOf(contactId);
                
                // Dynamically determine the object's type from the record ID
                String objectType = objectId.getSObjectType().getDescribe().getName();
                system.debug('Object Type: ' + objectType);
                
                // Describe the object's metadata to fetch child relationships
                Schema.DescribeSObjectResult objDescribe = Schema.getGlobalDescribe().get(objectType).getDescribe();
                List<Schema.ChildRelationship> childRelationships = objDescribe.getChildRelationships();
                
                // Initialize list to hold accessible relationship names
                List<String> accessibleRelationships = new List<String>();
                
                // Loop through each child relationship
                for (Schema.ChildRelationship rel : childRelationships) {
                    String relationshipName = rel.getRelationshipName();
                    
                    // Check if the relationship name and field are accessible
                    if (relationshipName != null && rel.getField().getDescribe().isAccessible()) {
                        accessibleRelationships.add(relationshipName);
                    }
                }
                
                // Add to map with object type as key and list of accessible relationships as value
                accessibleRelatedLists.put(objectType, accessibleRelationships);
                
                // Debug output for verification
                system.debug('Accessible Related Lists: ' + accessibleRelatedLists);
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            } catch (Exception e) {
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return accessibleRelatedLists;
        }
        
        public static Map<String, Object> getDriverRelatedListRecords(Id accountId) {
            // Map to store results
            Map<String, Object> relatedListData = new Map<String, Object>();
            
            try {
                // List of related list names for the Account object
                List<String> relatedLists = new List<String>{
                    	'Ticket__c',
                        'Inspection__c',
                        'SMS_Notify_Insp__c',
                        'Embark_MVR__c',
                        'Contacts'
                        };
                            
                            List<SObject> records = new List<SObject>();
                
                // Loop through each related list
                for (String relatedList : relatedLists) {
                    String query;
                    
                    // Define specific query conditions for each related list
                    if (relatedList == 'Ticket__c') {
                        query = 'SELECT Date_of_Ticket__c, Name, Attorney_Status__c, Driver__r.name FROM Ticket__c WHERE Driver__c = :accountId AND Attorney_Status__c != \'Closed\' ';
                    } else if (relatedList == 'Inspection__c') {
                        query = 'SELECT Ticket_Date__c, Name, status__c, DataQ_Outcome__c FROM Inspection__c WHERE Driver__c = :accountId AND Ticket_Date__c != null ';
                    } else if (relatedList == 'SMS_Notify_Insp__c') {
                        query = 'SELECT Name, Insp_Date__c, Driver_Lookup__r.Name, Member_Status__c FROM SMS_Notify_Insp__c WHERE Driver_Lookup__c = :accountId ';
                    } else  if (relatedList == 'Embark_MVR__c') {
                        query = 'SELECT Name, MVR_Request__r.Name, Driver__r.Name FROM Embark_MVR__c WHERE Driver__c = :accountId ';    
                    } else if (relatedList == 'Contacts') {
                        query = 'SELECT  Name, Email, Account.Name FROM Contact WHERE AccountId = :accountId AND Account.Name != Name ';
                    } else {
                        // Default query if none specified (optional)
                        query = 'SELECT Id FROM ' + relatedList + ' WHERE Carrier__c = :accountId ';
                    }
                    
                    // Execute the query
                    records = Database.query(query);
                    
                    // Prepare the result
                    Integer recordCount = records.size();
                    Map<String, Object> listDetails = new Map<String, Object>();
                    
                    if (recordCount > 5) {
                        listDetails.put('RecordCount', '5+'); // Indicate more than 5 records
                        listDetails.put('Records', records); // Return only the first 5 records
                    } else {
                        listDetails.put('RecordCount', recordCount);
                        listDetails.put('Records', records); // Return all records if 5 or fewer
                    }
                    
                    // Add data to the main map
                    relatedListData.put(relatedList, listDetails);
                }
            } catch (Exception e) {
                relatedListData.put('Error', e.getMessage());
            }
            
            return relatedListData;
        }
        
        
        public static Map<String, Object> getAccountRelatedListRecords(Id accountId) {
            // Map to store results
            Map<String, Object> relatedListData = new Map<String, Object>();
            
            try {
                // List of related list names for the Account object
                List<String> relatedLists = new List<String> { 
                        'Ticket__c',
                        'Inspection__c',
                        'SMS_Notify_Insp__c',
                        'Embark_MVR__c'
                };

                List<SObject> records = new List<SObject>();
                
                // Loop through each related list
                for (String relatedList : relatedLists) {
                    String query;
                    
                    // Define specific query conditions for each related list
                    if (relatedList == 'Account') {
                        query = 'SELECT Name, Phone, PersonEmail, Active_Inactive__c FROM Account WHERE Carrier__c = :accountId AND isPersonAccount = true AND Roles__pc = \'Driver\' ';
                    } else if (relatedList == 'Ticket__c') {
                        query = 'SELECT Date_of_Ticket__c, Name, Attorney_Status__c, TicketType__c, Driver__r.name FROM Ticket__c WHERE Driver__c = :accountId AND Attorney_Status__c != \'Closed\' ';
                    } else if (relatedList == 'Inspection__c') { // compliance challenge
                        query = 'SELECT Ticket_Date__c, Name, status__c, DataQ_Outcome__c FROM Inspection__c WHERE Driver__c = :accountId AND Ticket_Date__c != null ';
                    } else if (relatedList == 'SMS_Notify_Insp__c') {
                        query = 'SELECT Name, Insp_Date__c, Driver_Lookup__r.Name, Member_Status__c FROM SMS_Notify_Insp__c WHERE Driver_Lookup__c = :accountId ';
                    } else if (relatedList == 'BASIC_Score__c') {
                        query = 'SELECT Name, Alerts__c, Basic_Score_Date__c FROM BASIC_Score__c WHERE Driver_Lookup__c = :accountId ';
                    } else if (relatedList == 'Crash_Details__c') {
                        query = 'SELECT Name, Crash_Date__c, Driver_Lookup__r.Name  FROM Crash_Details__c WHERE Driver_Lookup__c = :accountId ';
                    } else if (relatedList == 'Contacts') {
                        query = 'SELECT  Name, Email, Account.Name FROM Contact WHERE AccountId = :accountId limit 6';
                    } else if (relatedList == 'SMS_Violation_Data__c') {
                        query = 'SELECT Name, Account__r.Name , Driver_Name__c, Inspection_Date__c FROM SMS_Violation_Data__c WHERE Driver__c = :accountId ';
                    } else if (relatedList == 'Embark_MVR__c') {
                        query = 'SELECT Id, CreatedDate, MVR_Status__c, Driver_State__c, Embark_MVR_Name FROM Embark_MVR__c WHERE Driver__c =: accountId ';
                    }
                    
                    // Execute the query
                    records = Database.query(query);
                    
                    // Prepare the result
                    Integer recordCount = records.size();
                    Map<String, Object> listDetails = new Map<String, Object>();
                    
                    if (recordCount > 5) {
                        listDetails.put('RecordCount', '5+'); // Indicate more than 5 records
                        listDetails.put('Records', records); // Return only the first 5 records
                    } else {
                        listDetails.put('RecordCount', recordCount);
                        listDetails.put('Records', records); // Return all records if 5 or fewer
                    }
                    
                    // Add data to the main map
                    relatedListData.put(relatedList, listDetails);
                }
            } catch (Exception e) {
                relatedListData.put('Error', e.getMessage());
            }
            
            return relatedListData;
        }
        
        public static Map<String, Object> getMVRReportRelatedListRecords(Id accountId) {
            // Map to store results
            Map<String, Object> relatedListData = new Map<String, Object>();
            
            try {
                // List of related list names for the Account object
                List<String> relatedLists = new List<String>{
                    'MVR_Message__c',
                        'Embark_MVR_License__c',
                        'Embark_MVR_Violation__c',
                        'Embark_MVR_Accident__c',
                        'Embark_MVR_Suspension__c',
                        'Embark_MVR_Medical__c'
                        };
                            
                            List<SObject> records = new List<SObject>();
                
                // Loop through each related list
                for (String relatedList : relatedLists) {
                    String query;
                    
                    // Define specific query conditions for each related list
                    if (relatedList == 'Embark_MVR_License__c') {
                        query = 'SELECT Name, Embark_MVR__r.Name FROM Embark_MVR_License__c WHERE Embark_MVR__c = :accountId ';
                    } else if (relatedList == 'MVR_Message__c') {
                        query = 'SELECT  Name, MVR_Report__r.Name FROM MVR_Message__c WHERE MVR_Report__c = :accountId ';
                    } else if (relatedList == 'Embark_MVR_Violation__c') {
                        query = 'SELECT  Name, Embark_MVR__r.Name FROM Embark_MVR_Violation__c WHERE Embark_MVR__c = :accountId ';
                    } else if (relatedList == 'Embark_MVR_Accident__c') {
                        query = 'SELECT  Name, Embark_MVR__r.Name FROM Embark_MVR_Accident__c WHERE Embark_MVR__c = :accountId ';
                    } else if (relatedList == 'Embark_MVR_Suspension__c') {
                        query = 'SELECT Name, Embark_MVR__r.Name FROM Embark_MVR_Suspension__c WHERE Embark_MVR__c = :accountId ';
                    } else if (relatedList == 'Embark_MVR_Medical__c') {
                        query = 'SELECT Name, Embark_MVR__r.Name FROM Embark_MVR_Medical__c WHERE Embark_MVR__c = :accountId ';
                    } else {
                        // Default query if none specified (optional)
                        query = 'SELECT Id FROM ' + relatedList + ' WHERE Carrier__c = :accountId ';
                    }
                    
                    // Execute the query
                    records = Database.query(query);
                    
                    // Prepare the result
                    Integer recordCount = records.size();
                    Map<String, Object> listDetails = new Map<String, Object>();
                    
                    if (recordCount > 5) {
                        listDetails.put('RecordCount', '5+'); // Indicate more than 5 records
                        listDetails.put('Records', records); // Return only the first 5 records
                    } else {
                        listDetails.put('RecordCount', recordCount);
                        listDetails.put('Records', records); // Return all records if 5 or fewer
                    }
                    
                    // Add data to the main map
                    relatedListData.put(relatedList, listDetails);
                }
            } catch (Exception e) {
                relatedListData.put('Error', e.getMessage());
            }
            
            return relatedListData;
        }
        
        public static Map<String, Object> getMVRRequestRelatedListRecords(Id accountId) {
            // Map to store results
            Map<String, Object> relatedListData = new Map<String, Object>();
            
            try {
                // List of related list names for the Account object
                List<String> relatedLists = new List<String>{
                    'Embark_MVR__c'
                        };
                            
                            List<SObject> records = new List<SObject>();
                
                // Loop through each related list
                for (String relatedList : relatedLists) {
                    String query;
                    
                    // Define specific query conditions for each related list
                    if (relatedList == 'Embark_MVR__c') {
                        query = 'SELECT Name, MVR_Request__r.Name FROM Embark_MVR__c WHERE MVR_Request__c = :accountId ';
                    } else {
                        // Default query if none specified (optional)
                        query = 'SELECT Id FROM ' + relatedList + ' WHERE Carrier__c = :accountId ';
                    }
                    
                    // Execute the query
                    records = Database.query(query);
                    
                    // Prepare the result
                    Integer recordCount = records.size();
                    Map<String, Object> listDetails = new Map<String, Object>();
                    
                    if (recordCount > 5) {
                        listDetails.put('RecordCount', '5+'); // Indicate more than 5 records
                        listDetails.put('Records', records); // Return only the first 5 records
                    } else {
                        listDetails.put('RecordCount', recordCount);
                        listDetails.put('Records', records); // Return all records if 5 or fewer
                    }
                    
                    // Add data to the main map
                    relatedListData.put(relatedList, listDetails);
                }
            } catch (Exception e) {
                relatedListData.put('Error', e.getMessage());
            }
            
            return relatedListData;
        }
        
        public static Map<String, Object> getTicketRelatedListRecords(Id accountId) {
            // Map to store results
            Map<String, Object> relatedListData = new Map<String, Object>();
            
            try {
                // List of related list names for the Account object
                List<String> relatedLists = new List<String>{
                    'Inspection__c',
                        'SMS_Notify_Violation__c'
                        };
                            
                            List<SObject> records = new List<SObject>();
                
                // Loop through each related list
                for (String relatedList : relatedLists) {
                    String query;
                    
                    // Define specific query conditions for each related list
                    if (relatedList == 'Inspection__c') {
                        query = 'SELECT Name,Driver__r.Name,Status__c, Associated_Ticket__r.Name FROM Inspection__c WHERE Associated_Ticket__c = :accountId ';
                    } else  if (relatedList == 'SMS_Notify_Violation__c') {
                        query = 'SELECT Name, Related_Ticket__r.Name FROM SMS_Notify_Violation__c WHERE Related_Ticket__c = :accountId ';
                    } else {
                        // Default query if none specified (optional)
                        query = 'SELECT Id FROM ' + relatedList + ' WHERE Carrier__c = :accountId ';
                    }
                    
                    // Execute the query
                    records = Database.query(query);
                    
                    // Prepare the result
                    Integer recordCount = records.size();
                    Map<String, Object> listDetails = new Map<String, Object>();
                    
                    if (recordCount > 5) {
                        listDetails.put('RecordCount', '5+'); // Indicate more than 5 records
                        listDetails.put('Records', records); // Return only the first 5 records
                    } else {
                        listDetails.put('RecordCount', recordCount);
                        listDetails.put('Records', records); // Return all records if 5 or fewer
                    }
                    
                    // Add data to the main map
                    relatedListData.put(relatedList, listDetails);
                }
            } catch (Exception e) {
                relatedListData.put('Error', e.getMessage());
            }
            
            return relatedListData;
        }
        
        
        public static Map<String, Object> getSMSInspectionDataRelatedListRecords(Id accountId) {
            // Map to store results
            Map<String, Object> relatedListData = new Map<String, Object>();
            
            try {
                // List of related list names for the Account object
                List<String> relatedLists = new List<String>{
                    'Inspections__c'
                        
                        };
                            
                            List<SObject> records = new List<SObject>();
                
                // Loop through each related list
                for (String relatedList : relatedLists) {
                    String query;
                    
                    // Define specific query conditions for each related list
                    if (relatedList == 'Inspections__c') {
                        query = 'SELECT Name,Driver__r.Name,Status__c, Associated_Ticket__r.Name FROM Inspection__c WHERE SMS_Inspection_data__c = :accountId ';
                    } else {
                        // Default query if none specified (optional)
                        query = 'SELECT Id FROM ' + relatedList + ' WHERE Carrier__c = :accountId ';
                    }
                    
                    // Execute the query
                    records = Database.query(query);
                    
                    // Prepare the result
                    Integer recordCount = records.size();
                    Map<String, Object> listDetails = new Map<String, Object>();
                    
                    if (recordCount > 5) {
                        listDetails.put('RecordCount', '5+'); // Indicate more than 5 records
                        listDetails.put('Records', records); // Return only the first 5 records
                    } else {
                        listDetails.put('RecordCount', recordCount);
                        listDetails.put('Records', records); // Return all records if 5 or fewer
                    }
                    
                    // Add data to the main map
                    relatedListData.put(relatedList, listDetails);
                }
            } catch (Exception e) {
                relatedListData.put('Error', e.getMessage());
            }
            
            return relatedListData;
        }
        
        /********************************************************************
    This Method is required to fetch the USER Id and Details by Contact Id
    *********************************************************************/
        public static User getUserByContactId(String contactId) {
            User userDetails= new User();
            
            // Validate input
            if (contactId == null) {
                Logger.error('ContactId cannot be null.').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                return userDetails;
            }
            
            try{
                // Query User associated with the ContactId
                userDetails = [
                    SELECT Id, Username, Email, Name, IsActive, Profile.Name, ContactId, CompanyName,
                    Title, City, State, PostalCode, Country, TimeZoneSidKey, LocaleSidKey,Phone, MobilePhone,
                    AboutMe, TwilioSF__Twilio_Personal_Number__c, Synced_with_abenity__c, Abenity_Status__c, Abenity_Failure_Message__c
                    FROM User
                    WHERE ContactId = :contactId
                    AND IsActive = true
                    LIMIT 1
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch (QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } 
            return userDetails;
        }
        
        public static void updateUserAlias(String contactId) {
            // Validate input parameters
            if (contactId == null) {
                Logger.error('UserId cannot be null.').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
             try {
            // Query the User to ensure it exists and is accessible
            User userToUpdate = [SELECT Id, Alias FROM User WHERE contactId = :contactId LIMIT 1];
            
            // Update the Alias field
            userToUpdate.Alias = 'newAlias';
            
           
                update userToUpdate;
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException e) {
                // Log the exception and rethrow for further handling
                System.debug('Error updating User Alias: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (DMLException de){
                Logger.error(de.getMessage(), de).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
        }
        
        private static List<Account> getDriverData() {
            System.debug('request body -> ' + RestContext.request.requestBody.toString());
            List<Account> foundAccounts = new List<Account>();
            
            try {
                // Parse JSON from the request body
                String jsonString = RestContext.request.requestBody.toString();
                Map<String, Object> parsedJSON = (Map<String, Object>) JSON.deserializeUntyped(jsonString);
                
                // Extract fields from the JSON
                String firstName = (String) parsedJSON.get('driverFirstName');
                String contactId = (String) parsedJSON.get('portalUserId');
                String email = (String) parsedJSON.get('driverEmail');
                String carrierDriverId = (String) parsedJSON.get('carrierDriverId');
                String lastName = (String) parsedJSON.get('driverLastName');
                String phone = (String) parsedJSON.get('driverPhone');
                
                // Fetch invalid phone numbers from metadata
                List<String> invalidPhoneNumbers = new List<String>();
                for (Invalid_Phone_Number__mdt invalidPhone : [SELECT MasterLabel, DeveloperName, Phone_Number__c FROM Invalid_Phone_Number__mdt]) {
                    invalidPhoneNumbers.add(invalidPhone.Phone_Number__c);
                }
                
                // Strip out all non-numerical values from the phone number
                String invalidNumbers = '[^0-9]';
                phone = phone != null ? phone.replaceAll(invalidNumbers, '') : null;
                
                // Query accounts based on the extracted data
                foundAccounts.addAll([
                    SELECT Id, 
                    FirstName, 
                    LastName, 
                    Carrier_s_Driver_ID__c, 
                    CDL_Number__c, 
                    PersonEmail, 
                    PersonMobilePhone, 
                    Last_4_of_SS__c, 
                    Spouse_First_Name__c, 
                    Spouse_Last_Name__c, 
                    CDL_State__c
                    FROM Account
                    WHERE IsPersonAccount = TRUE
                    AND ((FirstName = :firstName AND LastName = :lastName)
                         OR (PersonEmail = :email AND PersonEmail != null)
                         OR (Mobile_for_Texting__c = :phone 
                             AND Mobile_for_Texting__c NOT IN :invalidPhoneNumbers 
                             AND Mobile_for_Texting__c != null)
                         OR (Carrier_s_Driver_ID__c = :carrierDriverId AND Carrier_s_Driver_ID__c != null))
                    LIMIT 100
                ]);
                
                // Log success
                Logger.info('Request Successful')
                    .setRestRequestDetails(RestContext.request)
                    .setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                // Log error
                Logger.error(e.getMessage(), e)
                    .setRestRequestDetails(RestContext.request)
                    .setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return foundAccounts;
        }
        
        
        /* **********************************************************************
    * @description homeSearchBar method returns SOSL result of passed 'searchTerm' param.
    * @param searchTerm
    * @return List<List<sObject>>
    *********************************************************************** */
        
        public static List<List<SObject>> homeSearchBar(String searchTerm) {
            List<List<SObject>> searchResults = new List<List<SObject>>();
            try {
                
                searchTerm = EncodingUtil.urlDecode(searchTerm, 'utf-8');
                
                searchResults = [
                    FIND :searchTerm 
                    IN ALL FIELDS 
                    RETURNING 
                    Account (
                    	Name, CreatedDate, LastModifiedDate
                    ),
                    Contact (
                    	Name, Email, CreatedDate, LastModifiedDate
                    ),
                    Ticket__c(
                        Name, CreatedDate, LastModifiedDate
                    ), 
                    Driver__c(
                        Name, CreatedDate, LastModifiedDate
                    ),                             
                    SMS_Inspection_Data__c (
                        Name, CreatedDate, LastModifiedDate
                    ),
                    SMS_Violation_Data__c (
                        Name, CreatedDate, LastModifiedDate
                    )
                ];
                System.debug('Search Result : '+ searchResults);
                
                System.debug('Search Result : '+ searchResults);
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            } catch (Exception e) {
                // Apply Nebula Logger
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return searchResults;
            
            
        }
        
        
        private static List<Account> driverLookup(
            String contactId,
            String type
        ) {
            List<Account> parentDriverAccounts = new List<Account>();
            Id checkObjectId = (Id) contactId;
            // Check if contactId is a Contact (starts with '003')
            try{
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    System.debug('Contact ID: ' + contactId);
                    System.debug('Type: ' + type);
                    
                    // Verify parent account data exists
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        // Check for related accounts and collect their IDs
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account relatedAcc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(relatedAcc.Id);
                            }
                            
                            System.debug('Parent Account and Related Accounts identified.');
                            // Query for active parent driver accounts associated with parent and related accounts
                            parentDriverAccounts = [
                                SELECT
                                Id, 
                                Name, 
                                Carrier__r.Name, 
                                PersonEmail,
                                PersonMobilePhone
                                FROM Account
                                WHERE
                                IsPersonAccount = TRUE
                                AND Roles__pc = 'Driver'
                                AND (Carrier__c = :parentAccount.Id
                                     OR Carrier__c IN :relatedAccountIds)
                                //   AND Active_Inactive__c = 'Active'
                                WITH USER_MODE
                            ];
                        }
                    }
                }
                else {
                    // If contactId is an Account (does not start with '003'), query directly by Carrier__c
                    System.debug(
                        'Processing as Account ID (Carrier). Contact ID: ' + contactId
                    );
                    
                    parentDriverAccounts = [
                        SELECT
                        Id, 
                        Name, 
                        Carrier__r.Name, 
                        PersonEmail, 
                        PersonMobilePhone
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        //    AND Active_Inactive__c = 'Active'
                        WITH USER_MODE
                    ];
                    
                    System.debug('Queried Parent Driver Accounts: ' + parentDriverAccounts);
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return parentDriverAccounts;
        }
        
        private static List<Account> allActiveMembership(String contactId,String type) {
            List<Account> parentDriverAccounts = new List<Account>();
            Id checkObjectId = (Id) contactId;
            // Check if contactId is a Contact (starts with '003')
            // 
            try{
                
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    System.debug('Contact ID: ' + contactId);
                    System.debug('Type: ' + type);
                    
                    // Verify parent account data exists
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        // Check for related accounts and collect their IDs
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account relatedAcc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(relatedAcc.Id);
                            }
                            
                            System.debug('Parent Account and Related Accounts identified.');
                            
                            // Query for active parent driver accounts associated with parent and related accounts
                            parentDriverAccounts = [
                                SELECT
                                status__c,
                                Name,
                                Roles__pc,
                                Member__c,
                                PersonMobilePhone,
                                PersonEmail,
                                CreatedDate,
                                Carrier__c,
                                Carrier__r.Name
                                FROM Account
                                WHERE
                                IsPersonAccount = TRUE
                                AND Roles__pc = 'Driver'
                                AND (Carrier__c = :parentAccount.Id
                                     OR Carrier__c IN :relatedAccountIds)
                                AND Active_Inactive__c = 'Active'
                            ];
                        }
                    }
                } else {
                    // If contactId is an Account (does not start with '003'), query directly by Carrier__c
                    System.debug(
                        'Processing as Account ID (Carrier). Contact ID: ' + contactId
                    );
                    
                    parentDriverAccounts = [
                        SELECT
                        status__c,
                        Name,
                        Roles__pc,
                        Member__c,
                        PersonMobilePhone,
                        PersonEmail,
                        CreatedDate,
                        Carrier__c,
                        Carrier__r.Name
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        AND Active_Inactive__c = 'Active'
                    ];
                    
                    System.debug('Queried Parent Driver Accounts: ' + parentDriverAccounts);
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return parentDriverAccounts;
        }
        
        private static List<AccountContactRelation> ContactNameandParentandRelatedAccount(
            String contactId,
            String type
        ) {        
            Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
            
            List<AccountContactRelation> ParentAcc = new List<AccountContactRelation>();
            List<AccountContactRelation> RelatedAcc = new List<AccountContactRelation>();
            
            try{
                
                if (accountData.get('parentAccount').size() > 0) {
                    Account parentAccount = accountData.get('parentAccount')[0];
                    
                    if (accountData.get('relatedAccounts').size() > 0) {
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                    }   
                        ParentAcc = [
                            SELECT Contact.Name, Contact.Id, Account.Name, IsDirect,
                            LastModifiedBy.Name, CreatedById
                            FROM AccountContactRelation
                            WHERE ContactId = :contactId AND IsActive =True 
                            ORDER BY IsDirect DESC
                        ];
                    
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return ParentAcc;
        }
        
        private static List<Ticket__c> allOpenTickets(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Ticket__c> openTickets = new List<Ticket__c>();
            
            // Check if contactId is a Contact (starts with '003')
            try{
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    System.debug('Contact ID: ' + contactId);
                    System.debug('Type: ' + type);
                    
                    // Verify parent account data exists
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        // Check for related accounts and collect their IDs
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account relatedAcc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(relatedAcc.Id);
                            }
                            
                            System.debug('Parent Account and Related Accounts identified.');
                            
                            // Query for open tickets associated with parent and related accounts
                            if (type == 'full') {
                                openTickets = [
                                    SELECT
                                    Name,
                                    Attorney_Status__c,
                                    Driver_Full_Name__c,Driver__c,
                                    Carrier__c,
                                    Date_of_Ticket__c,
                                    Citation_Number__c,
                                    Violation_Category__c,
                                    Violation_Description__c,
                                    Carrier__r.Name,
                                    TicketType__c,
                                    Ticket_Outcome__c,
                                    Ticket_State__c,
                                    Ticket_City__c,
                                    Ticket_County__c, 
                                    Court_Date__c,
                                    Attorney_Phone__c
                                    FROM Ticket__c
                                    WHERE
                                    (Carrier__c = :parentAccount.Id
                                     OR Carrier__c IN :relatedAccountIds)
                                    AND Attorney_Status__c != 'Ticket Closed'
                                ];
                            }
                        }
                    }
                } else {
                    // If contactId is an Account (does not start with '003'), query directly by Carrier__c
                    System.debug(
                        'Processing as Account ID (Carrier). Contact ID: ' + contactId
                    );
                    
                    openTickets = [
                        SELECT
                        Name,
                        Attorney_Status__c,
                        Driver_Full_Name__c,Driver__c,
                        Carrier__c,
                        Date_of_Ticket__c,
                        Citation_Number__c,
                        Violation_Category__c,
                        Violation_Description__c,
                        Carrier__r.Name,
                        TicketType__c,
                        Ticket_Outcome__c,
                        Ticket_State__c,
                        Ticket_City__c,
                        Ticket_County__c, 
                        Court_Date__c,
                        Attorney_Phone__c
                        FROM Ticket__c
                        WHERE Carrier__c = :contactId AND Attorney_Status__c != 'Ticket Closed'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
             
            return openTickets;
        }
        
        private static List<Inspection__c> allComplianceChallenges(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<Inspection__c> complianceChallenges = new List<Inspection__c>();
            
            try{
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                            
                            if (type == 'full') {
                                complianceChallenges = [
                                    SELECT
                                    Status__c,
                                    Name,
                                    Driver_Name__c,
                                    Ticket_Fine_Due_Date__c,
                                    Ticket_Fine_Amount__c,
                                    Associated_Ticket__r.Name,
                                    Ticket_Outcome__c,
                                    Carrier__r.Name
                                    FROM Inspection__c
                                    WHERE
                                    (Carrier__c = :parentAccount.Id
                                     OR Carrier__c IN :relatedAccountIds)
                                    AND Status__c != 'Closed'
                                ];
                            }
                        }
                    }
                } else {
                    complianceChallenges = [
                        SELECT
                        Status__c,
                        Name,
                        Driver_Name__c,
                        Ticket_Fine_Due_Date__c,
                        Ticket_Fine_Amount__c,
                        Associated_Ticket__r.Name,
                        Ticket_Outcome__c,
                        Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId AND Status__c != 'Closed'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return complianceChallenges;
        }
        
        private static List<Ticket__c> allYourTicketWinRate(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<Ticket__c> closedTickets = new List<Ticket__c>();
            
            try{
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                            
                            if (type == 'full') {
                                closedTickets = [
                                    SELECT Win_Loss__c, Win__c, Winable__c, Carrier__r.Name
                                    FROM Ticket__c
                                    WHERE
                                    (Carrier__c = :parentAccount.Id
                                     OR Carrier__c IN :relatedAccountIds)
                                    AND Attorney_Status__c = 'Ticket Closed'
                                    AND Win_Loss__c != ''
                                    AND Ticket_Outcome__c IN (
                                        'Dismissed',
                                        'Dismissed/Deferred - 6 Mo',
                                        'Dismissed/Deferred - 1 Mo',
                                        'Dismissed/Deferred - 3 Mo',
                                        'Guilty',
                                        'No Change',
                                        'No Change - No Points',
                                        'Reduced',
                                        'Reduced to 0 Points'
                                    )
                                ];
                            }
                        }
                    }
                } else {
                    closedTickets = [
                        SELECT Win_Loss__c, Win__c, Winable__c, Carrier__r.Name
                        FROM Ticket__c
                        WHERE
                        Carrier__c = :contactId
                        AND Attorney_Status__c = 'Ticket Closed'
                        AND Win_Loss__c != ''
                        AND Ticket_Outcome__c IN (
                            'Dismissed',
                            'Dismissed/Deferred - 6 Mo',
                            'Dismissed/Deferred - 1 Mo',
                            'Dismissed/Deferred - 3 Mo',
                            'Guilty',
                            'No Change',
                            'No Change - No Points',
                            'Reduced',
                            'Reduced to 0 Points'
                        )
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }        
            return closedTickets;
        }
        
        private static List<SMS_Violation_Data__c> violations60days(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> recentViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                            
                            if (type == 'full') {
                                recentViolations = [
                                    SELECT
                                    Id,
                                    Name,
                                    Inspection_Date__c,
                                    Basic_Description__c,
                                    Group_Description__c,
                                    Violation_Code__c,
                                    Section_Description__c,
                                    Severity_Weight__c,
                                    Time_Weight__c,
                                    Violation_Value__c,
                                    SMS_Inspection_Data__r.Report_Number__c,
                                    SMS_Inspection_Data__r.Unit_Type_Desc__c,
                                    SMS_Inspection_Data__r.Unit_License__c,
                                    SMS_Inspection_Data__r.VIN__c,
                                    SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                                    SMS_Inspection_Data__r.Unit_License2__c,
                                    SMS_Inspection_Data__r.VIN2__c,
                                    Account__r.Name
                                    FROM SMS_Violation_Data__c
                                    WHERE
                                    SMS_Inspection_Data__r.Inspection_Date__c = LAST_90_DAYS
                                  //  AND SMS_Inspection_Data__r.BASIC_Violation__c != null
                                    AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                                    AND (Account__c = :parentAccount.Id
                                         OR Account__c IN :relatedAccountIds)
                                ];
                            }
                        }
                    }
                } else {
                    recentViolations = [
                        SELECT
                        Id,
                        Name,
                        Inspection_Date__c,
                        Basic_Description__c,
                        Group_Description__c,
                        Violation_Code__c,
                        Section_Description__c,
                        Severity_Weight__c,
                        Time_Weight__c,
                        Violation_Value__c,
                        SMS_Inspection_Data__r.Report_Number__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc__c,
                        SMS_Inspection_Data__r.Unit_License__c,
                        SMS_Inspection_Data__r.VIN__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                        SMS_Inspection_Data__r.Unit_License2__c,
                        SMS_Inspection_Data__r.VIN2__c,
                        Account__r.Name
                        FROM SMS_Violation_Data__c
                        WHERE
                        SMS_Inspection_Data__r.Inspection_Date__c = LAST_90_DAYS
                       // AND SMS_Inspection_Data__r.BASIC_Violation__c != null 
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND Account__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return recentViolations;
        }
        
        private static List<SMS_Violation_Data__c> allViolationsRollingOff(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> historicalViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType()) {
                    // Fetch parent and related accounts if the contact ID is for a Contact
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (
                        accountData != null &&
                        accountData.containsKey('parentAccount') &&
                        !accountData.get('parentAccount').isEmpty()
                    ) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        if (
                            accountData.containsKey('relatedAccounts') &&
                            !accountData.get('relatedAccounts').isEmpty()
                        ) {
                            List<Id> relatedAccountIds = new List<Id>();
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                            
                            if (type == 'full') {
                                historicalViolations = [
                                    SELECT
                                    Inspection_Date__c,
                                    Basic_Description__c,
                                    Severity_Weight__c,
                                    Account__r.Name
                                    FROM SMS_Violation_Data__c
                                    WHERE
                                    SMS_Inspection_Data__r.Inspection_Date__c != LAST_N_MONTHS:23
                                    AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:24
                                    AND SMS_Inspection_Data__r.BASIC_Violation__c != null AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                                    AND (Account__c = :parentAccount.Id
                                         OR Account__c IN :relatedAccountIds)
                                ];
                            }
                        }
                    }
                } else {
                    // Directly query if the contactId is for an Account
                    historicalViolations = [
                        SELECT
                        Inspection_Date__c,
                        Basic_Description__c,
                        Severity_Weight__c,
                        Account__r.Name
                        FROM SMS_Violation_Data__c
                        WHERE
                        SMS_Inspection_Data__r.Inspection_Date__c != LAST_N_MONTHS:23
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:24
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != null AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND Account__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return historicalViolations;
        }
        
        private static List<SMS_Violation_Data__c> allCurrentViolationsWithBasicCheck(
            String contactId,
            String type
        ) {
            
            List<SMS_Violation_Data__c> currentViolations = new List<SMS_Violation_Data__c>();
            Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
            try{
                
                
                if (accountData.get('parentAccount').size() > 0) {
                    Account parentAccount = accountData.get('parentAccount')[0];
                    
                    if (accountData.get('relatedAccounts').size() > 0) {
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        if (
                            Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                            type == 'full'
                        ) {
                            currentViolations = [
                                SELECT
                                Id,
                                Name,
                                Inspection_Date__c,
                                Basic_Description__c,
                                Group_Description__c,
                                Violation_Code__c,
                                Section_Description__c,
                                Severity_Weight__c,
                                Time_Weight__c,
                                Violation_Value__c,
                                SMS_Inspection_Data__r.Report_Number__c,
                                SMS_Inspection_Data__r.Unit_Type_Desc__c,
                                SMS_Inspection_Data__r.Unit_License__c,
                                SMS_Inspection_Data__r.VIN__c,
                                SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                                SMS_Inspection_Data__r.Unit_License2__c,
                                SMS_Inspection_Data__r.VIN2__c,
                                Account__r.Name
                                FROM SMS_Violation_Data__c
                                WHERE
                                Inspection_Date__c = LAST_90_DAYS
                                AND (Account__c = :parentAccount.Id
                                     OR Account__c IN :relatedAccountIds)
                                AND (SMS_Inspection_Data__r.BASIC_Violation__c = 0 
                                  //   OR
                                  //   SMS_Inspection_Data__r.BASIC_Violation__c = null
                                    )
                            ];
                        } else {
                            currentViolations = [
                                SELECT
                                Id,
                                Name,
                                Inspection_Date__c,
                                Basic_Description__c,
                                Group_Description__c,
                                Violation_Code__c,
                                Section_Description__c,
                                Severity_Weight__c,
                                Time_Weight__c,
                                Violation_Value__c,
                                SMS_Inspection_Data__r.Report_Number__c,
                                SMS_Inspection_Data__r.Unit_Type_Desc__c,
                                SMS_Inspection_Data__r.Unit_License__c,
                                SMS_Inspection_Data__r.VIN__c,
                                SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                                SMS_Inspection_Data__r.Unit_License2__c,
                                SMS_Inspection_Data__r.VIN2__c,
                                Account__r.Name
                                FROM SMS_Violation_Data__c
                                WHERE
                                Inspection_Date__c = LAST_90_DAYS
                                AND Account__c = :contactId
                                AND (SMS_Inspection_Data__r.BASIC_Violation__c = 0 
                                    // OR
                                    // SMS_Inspection_Data__r.BASIC_Violation__c = null
                                    )
                            ];
                        }
                    }
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return currentViolations;
        }
        
        private static List<BASIC_Score__c> allBASICsAlert(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> basicAlerts = new List<BASIC_Score__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        basicAlerts = [
                            SELECT Carrier_Lookup__c, Alerts__c, Basic_Score_Date__c
                            FROM BASIC_Score__c
                            WHERE
                            Basic_Score_Date__c = LAST_N_DAYS:6
                            AND (Carrier_Lookup__c = :parentAccount.Id
                                 OR Carrier_Lookup__c IN :relatedAccountIds)
                        ];
                    }
                } else {
                    basicAlerts = [
                        SELECT Carrier_Lookup__c, Alerts__c, Basic_Score_Date__c
                        FROM BASIC_Score__c
                        WHERE
                        Basic_Score_Date__c = LAST_N_DAYS:6
                        AND Carrier_Lookup__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();}
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return basicAlerts;
        }
        
        private static List<BASIC_Score__c> BASICsUnsafeDriving(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> unsafeDrivingAlerts = new List<BASIC_Score__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        unsafeDrivingAlerts = [
                            SELECT Carrier_Lookup__c, Carrier_Lookup__r.Name, Unsafe_Driving__c
                            FROM BASIC_Score__c
                            WHERE
                            Basic_Score_Date__c = LAST_N_DAYS:7
                            AND (Carrier_Lookup__c = :parentAccount.Id
                                 OR Carrier_Lookup__c IN :relatedAccountIds)
                        ];
                    }
                    
                } else {
                    unsafeDrivingAlerts = [
                        SELECT Carrier_Lookup__c, Unsafe_Driving__c,Carrier_Lookup__r.Name
                        FROM BASIC_Score__c
                        WHERE
                        Basic_Score_Date__c = LAST_N_DAYS:7
                        AND Carrier_Lookup__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return unsafeDrivingAlerts;
        }
        
        private static List<BASIC_Score__c> BASICsDriverFitness(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> driverFitnessAlerts = new List<BASIC_Score__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        driverFitnessAlerts = [
                            SELECT Carrier_Lookup__c, Driver_Fitness__c, Carrier_Lookup__r.Name
                            FROM BASIC_Score__c
                            WHERE
                            Basic_Score_Date__c = LAST_N_DAYS:7
                            AND (Carrier_Lookup__c = :parentAccount.Id
                                 OR Carrier_Lookup__c IN :relatedAccountIds)
                        ];
                    }
                } else {
                    driverFitnessAlerts = [
                        SELECT Carrier_Lookup__c, Driver_Fitness__c, Carrier_Lookup__r.Name
                        FROM BASIC_Score__c
                        WHERE
                        Basic_Score_Date__c = LAST_N_DAYS:7
                        AND Carrier_Lookup__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return driverFitnessAlerts;
        }
        
        private static List<BASIC_Score__c> BASICsControlledSubstance(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> controlledSubstanceAlerts = new List<BASIC_Score__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        controlledSubstanceAlerts = [
                            SELECT Carrier_Lookup__c, Controlled_Substances__c, Carrier_Lookup__r.Name
                            FROM BASIC_Score__c
                            WHERE
                            Basic_Score_Date__c = LAST_N_DAYS:7
                            AND (Carrier_Lookup__c = :parentAccount.Id
                                 OR Carrier_Lookup__c IN :relatedAccountIds)
                        ];
                    }
                } else {
                    controlledSubstanceAlerts = [
                        SELECT Carrier_Lookup__c, Controlled_Substances__c, Carrier_Lookup__r.Name
                        FROM BASIC_Score__c
                        WHERE
                        Basic_Score_Date__c = LAST_N_DAYS:7
                        AND Carrier_Lookup__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return controlledSubstanceAlerts;
        }
        
        private static List<ISS_Score__c> ISSscoreThisWeek(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<ISS_Score__c> issScores = new List<ISS_Score__c>();
            
            // Check if contactId is a valid contact and type is 'full'
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query ISS scores for parent and related accounts
                        issScores = [
                            SELECT ISS_Score__c, Carrier_Lookup__r.Name
                            FROM ISS_Score__c
                            WHERE
                            (Carrier_Lookup__c = :parentAccount.Id
                             OR Carrier_Lookup__c IN :relatedAccountIds)
                            AND ISS_Score_Date__c = LAST_N_DAYS:7
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    issScores = [
                        SELECT ISS_Score__c, Carrier_Lookup__r.Name
                        FROM ISS_Score__c
                        WHERE
                        Carrier_Lookup__c = :contactId
                        AND ISS_Score_Date__c = LAST_N_DAYS:7
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return issScores;
        }
        
        private static List<BASIC_Score__c> BASICsVehicleMaintenance(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> vehicleMaintenanceAlerts = new List<BASIC_Score__c>();
            
            // Check if contactId is a valid contact and type is 'full'
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query vehicle maintenance alerts for parent and related accounts
                        vehicleMaintenanceAlerts = [
                            SELECT Carrier_Lookup__c, Vehicle_Maintenance__c, Carrier_Lookup__r.Name
                            FROM BASIC_Score__c
                            WHERE
                            (Carrier_Lookup__c = :parentAccount.Id
                             OR Carrier_Lookup__c IN :relatedAccountIds)
                            AND Basic_Score_Date__c = LAST_N_DAYS:7
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    vehicleMaintenanceAlerts = [
                        SELECT Carrier_Lookup__c, Vehicle_Maintenance__c, Carrier_Lookup__r.Name
                        FROM BASIC_Score__c
                        WHERE
                        Carrier_Lookup__c = :contactId
                        AND Basic_Score_Date__c = LAST_N_DAYS:7
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return vehicleMaintenanceAlerts;
        }
        
        private static List<BASIC_Score__c> BASICsHoursOfService(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> hoursOfServiceAlerts = new List<BASIC_Score__c>();
            
            // Check if contactId is a valid contact and type is 'full'
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query hours of service alerts for parent and related accounts
                        hoursOfServiceAlerts = [
                            SELECT Carrier_Lookup__c, HOS__c, Carrier_Lookup__r.Name
                            FROM BASIC_Score__c
                            WHERE
                            (Carrier_Lookup__c = :parentAccount.Id
                             OR Carrier_Lookup__c IN :relatedAccountIds)
                            AND Basic_Score_Date__c = LAST_N_DAYS:7
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    hoursOfServiceAlerts = [
                        SELECT Carrier_Lookup__c, HOS__c, Carrier_Lookup__r.Name
                        FROM BASIC_Score__c
                        WHERE
                        Carrier_Lookup__c = :contactId
                        AND Basic_Score_Date__c = LAST_N_DAYS:7
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return hoursOfServiceAlerts;
        }
        
        private static List<BASIC_Score__c> BASICsCrashIndicator(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<BASIC_Score__c> crashIndicatorAlerts = new List<BASIC_Score__c>();
            
            // Check if contactId is a valid contact and type is 'full'
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query crash indicator alerts for parent and related accounts
                        crashIndicatorAlerts = [
                            SELECT Carrier_Lookup__c, Crash_Indicator__c, Carrier_Lookup__r.Name
                            FROM BASIC_Score__c
                            WHERE
                            (Carrier_Lookup__c = :parentAccount.Id
                             OR Carrier_Lookup__c IN :relatedAccountIds)
                            AND Basic_Score_Date__c = LAST_N_DAYS:7
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    crashIndicatorAlerts = [
                        SELECT Carrier_Lookup__c, Crash_Indicator__c, Carrier_Lookup__r.Name
                        FROM BASIC_Score__c
                        WHERE
                        Carrier_Lookup__c = :contactId
                        AND Basic_Score_Date__c = LAST_N_DAYS:7
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return crashIndicatorAlerts;
        }
        
        private static List<Account> getActiveDrivers(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            AND Roles__pc = 'Driver'
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            AND Active_Inactive__c = 'Active'
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        AND Active_Inactive__c = 'Active'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        private static List<Account> getInactiveDrivers(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            AND Roles__pc = 'Driver'
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            AND Active_Inactive__c != 'Active' AND Active_Inactive__c != 'Pending'
                            AND AVSFQB__Billing_City__c=''
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        AND Active_Inactive__c != 'Active' AND Active_Inactive__c != 'Pending'
                        AND AVSFQB__Billing_City__c=''
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch (exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        @testVisible
        private static List<Account> getPendingDrivers(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            AND Roles__pc = 'Driver'
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            AND Active_Inactive__c != 'Pending'
                            
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        AND Active_Inactive__c != 'Pending'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        private static List<Account> getDriversExpired(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            AND Roles__pc = 'Driver'
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            AND Med_Cert_Expiration_Date__c <= Today
                            AND CDL_Expiration_Date__c<= Today
                            AND Carrier__c != Null
                            AND Carrier_Automation_Turn_On_Monitoring__c= True
                            AND Carrier_Embark_Employer_Id__c=''
                            
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        AND Med_Cert_Expiration_Date__c <= Today
                        AND CDL_Expiration_Date__c<= Today
                        AND Carrier__c != Null
                        AND Carrier_Automation_Turn_On_Monitoring__c= True
                        AND Carrier_Embark_Employer_Id__c=''
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        private static List<Account> getAccountsNeedingHuntedDFW(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            AND (AVSFQB__Billing_Zip__c LIKE '753%' OR AVSFQB__Billing_Zip__c LIKE '752%') 
                            //  AND Account_Record_Type__pc = 'Carrier'
                            
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        
                        AND Carrier__c = :contactId
                        AND (AVSFQB__Billing_Zip__c LIKE '753%' OR AVSFQB__Billing_Zip__c LIKE '752%') 
                        //  AND Account_Record_Type__pc = 'Carrier'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        private static List<Account> getAccountsNeedingHuntedMcAllen(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            AND (AVSFQB__Billing_State__c = 'TX') 
                            //AND Account_Record_Type__pc = 'Carrier'
                            
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        
                        AND Carrier__c = :contactId
                        AND (AVSFQB__Billing_State__c = 'TX') 
                        //  AND Account_Record_Type__pc = 'Carrier'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        private static List<Account> getAllDrivers(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Active_Inactive__c,
                            AB_Address__c,
                            AB_City__c,
                            AB_Country__c,
                            AB_Email_Option__c,
                            AB_Exclude__c,
                            AB_Offer_Radius__c,
                            AB_State__c,
                            AB_Username__c,
                            AB_Username_Error__c,
                            AB_Zip__c,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c,
                            Embark_Employee_Id__c,
                            Carrier_Embark_Employer_Id__c,
                            Embark_Monitoring_Active__c
                            FROM Account
                            WHERE
                            IsPersonAccount = TRUE
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            // AND Account_Record_Type__pc='Person Account'
                            
                            
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Active_Inactive__c,
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c,
                        Embark_Employee_Id__c,
                        Carrier_Embark_Employer_Id__c,
                        Embark_Monitoring_Active__c
                        FROM Account
                        WHERE
                        IsPersonAccount = TRUE
                        // AND Account_Record_Type__pc='Person Account'
                        AND Carrier__c = :contactId
                        
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        private static List<Account> getRecentAccounts(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Account> activeDrivers = new List<Account>();
            try{ 
                // Check if contactId is a valid contact and type is 'full'
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query active drivers for parent and related accounts
                        activeDrivers = [
                            SELECT
                            Name,
                            Carrier__c,
                            Carrier__r.Name,
                            PersonMobilePhone,
                            PersonEmail,
                            Payer__c,
                            Carrier_s_Driver_ID__c,
                            CDL_State__c,
                            CDL_Number__c
                            FROM Account
                            
                            WHERE
                            IsPersonAccount = TRUE
                            AND Roles__pc = 'Driver'
                            AND (Carrier__c = :parentAccount.Id
                                 OR Carrier__c IN :relatedAccountIds)
                            ORDER BY LastReferencedDate DESC NULLS LAST, LastViewedDate DESC NULLS LAST LIMIT 10
                        ];
                    }
                } else {
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    activeDrivers = [
                        SELECT
                        Name,
                        Carrier__c,
                        Carrier__r.Name,
                        PersonMobilePhone,
                        PersonEmail,
                        Payer__c,
                        Carrier_s_Driver_ID__c,
                        CDL_State__c,
                        CDL_Number__c
                        FROM Account
                        
                        WHERE
                        IsPersonAccount = TRUE
                        AND Roles__pc = 'Driver'
                        AND Carrier__c = :contactId
                        ORDER BY LastReferencedDate DESC NULLS LAST, LastViewedDate DESC NULLS LAST LIMIT 10
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return activeDrivers;
        }
        
        
        
        private static List<Map<String, Integer>> ISSscore(String contactId, String type) {
            
            Id checkObjectId = (Id) contactId;
            List<Map<String, Integer>> avgISSScores = new List<Map<String, Integer>>();
            List<ISS_Score__c> issScoreRecords = new List<ISS_Score__c>();
            
            // Check if contactId is a valid contact and type is 'full'
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query ISS scores for parent and related accounts
                        // issScores = [
                        //     SELECT SUM(ISS_Score__c) totalScore, CALENDAR_MONTH(ISS_Score_Date__c) scoreMonth
                        //     FROM ISS_Score__c
                        //     WHERE
                        //     (Carrier_Lookup__c = :parentAccount.Id
                        //      OR Carrier_Lookup__c IN :relatedAccountIds)
                        //     AND ISS_Score_Date__c = LAST_N_MONTHS:12
                        //     GROUP BY CALENDAR_MONTH(ISS_Score_Date__c)
                        // ];
                        
                        issScoreRecords = [
                            SELECT 
                            ISS_Score_Date__c, ISS_Score__c 
                            FROM ISS_Score__c 
                            WHERE 
                            (Carrier_Lookup__c = :parentAccount.Id
                             OR Carrier_Lookup__c IN :relatedAccountIds)
                            AND ISS_Score_Date__c = LAST_N_MONTHS:12
                        ];
                        
                    }
                } else {
                    
                    // Handle the case where the contact is not a valid contact or type is not 'full'
                    // issScores = [
                    //     SELECT SUM(ISS_Score__c) totalScore, CALENDAR_MONTH(ISS_Score_Date__c) scoreMonth
                    //     FROM ISS_Score__c
                    //     WHERE
                    //     Carrier_Lookup__c = :contactId
                    //     AND ISS_Score_Date__c = LAST_N_MONTHS:12
                    //     GROUP BY CALENDAR_MONTH(ISS_Score_Date__c) 
                    // ];
                    
                    issScoreRecords = [
                        SELECT 
                        ISS_Score_Date__c, ISS_Score__c 
                        FROM ISS_Score__c 
                        WHERE 
                        Carrier_Lookup__c =: contactId
                        AND ISS_Score_Date__c = LAST_N_MONTHS:12
                    ];
                }
                
                if ( !issScoreRecords.isEmpty() ) {
                    
                    Map<Integer, Decimal> sumOfISSScore = new Map<Integer, Decimal>();
                    Map<Integer, Integer> totalISSScore = new Map<Integer, Integer>();
                    
                    for (ISS_Score__c record : issScoreRecords) {
                        
                        Integer month = record.ISS_Score_Date__c.month();
                        
                        if (record.ISS_Score__c != null) {
                            if (sumOfISSScore.containsKey(month)) {
                                Decimal oldSum = sumOfISSScore.get(month);
                                oldSum += record.ISS_Score__c;
                                sumOfISSScore.put(month, oldSum);
                            } else {
                                sumOfISSScore.put(month, record.ISS_Score__c);
                            }
                        }
                        
                        if (totalISSScore.containsKey(month)) {
                            Integer oldCount = totalISSScore.get(month);
                            oldCount += 1;
                            totalISSScore.put(month, oldCount);
                        } else {
                            totalISSScore.put(month, 1);
                        }
                    }
                    
                    for(Integer month : totalISSScore.keyset()) {
                        if (sumOfISSScore.containsKey(month)) {
                            Map<String, Integer> result = new Map<String, Integer>();
                            result.put('scoreMonth', month);
                            result.put('totalScore', (Integer) Math.rInt(sumOfISSScore.get(month) / totalISSScore.get(month)));
                            avgISSScores.add(result);
                        }
                    }
                }
                
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();            
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return avgISSScores;
        }
        
        
        private static List<Ticket__c> getOpenTickets(String contactId, String type) {
            List<Ticket__c> openTickets = new List<Ticket__c>();
            try {
                Id checkObjectId = (Id) contactId;
                
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData.get('parentAccount') != null && accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        try {
                            openTickets = [
                                SELECT
                                Date_of_Ticket__c,
                                Name,
                                Driver_Full_Name__c,
                                Carrier__c,
                                Carrier__r.Name,
                                Violation_Description__c,
                                Violation_Category__c,
                                Court_Date__c,
                                Attorney_Status__c,
                                Ticket_City__c,
                                Ticket_State__c,
                                Ticket_Outcome__c,
                                TicketType__c
                                FROM Ticket__c
                                WHERE
                                (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                                AND Attorney_Status__c != 'Ticket Closed'
                            ];
                        } catch (QueryException qe) {
                            System.debug('QueryException in retrieving open tickets for related accounts: ' + qe.getMessage());
                            Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                            Logger.saveLog();
                        }
                    }
                } else {
                    try {
                        openTickets = [
                            SELECT
                            Date_of_Ticket__c,
                            Name,
                            Driver_Full_Name__c,
                            Carrier__c,
                            Carrier__r.Name,
                            Violation_Description__c,
                            Violation_Category__c,
                            Court_Date__c,
                            Attorney_Status__c,
                            Ticket_City__c,
                            Ticket_State__c,
                            Ticket_Outcome__c,
                            TicketType__c
                            FROM Ticket__c
                            WHERE Carrier__c = :contactId AND Attorney_Status__c != 'Ticket Closed'
                        ];
                    } catch (QueryException qe) {
                        System.debug('QueryException in retrieving open tickets for a specific contact: ' + qe.getMessage());
                        Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    }
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException in getOpenTickets: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('An unexpected error occurred in getOpenTickets: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return openTickets;
        }
        
        private static List<Ticket__c> getFinesUnpaidTickets(String contactId, String type) {
            List<Ticket__c> openTickets = new List<Ticket__c>();
            try {
                Id checkObjectId = (Id) contactId;
                
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData.get('parentAccount') != null && accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        try {
                            openTickets = [
                                SELECT
                                Date_of_Ticket__c,
                                Name,
                                Driver_Full_Name__c,
                                Final_Fine__c,
                                Fine_Due_Date__c,
                                Attorney__r.Name,
                                Carrier__c,
                                Carrier__r.Name,
                                Attorney_Status__c,
                                Ticket_Outcome__c,
                                TicketType__c
                                FROM Ticket__c
                                WHERE
                                (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                                AND Final_Fine__c > 0
                                AND (Fine_Due_Date__c = TODAY OR Fine_Due_Date__c > TODAY OR Fine_Due_Date__c = LAST_N_DAYS:30)
                            ];
                        } catch (QueryException qe) {
                            System.debug('QueryException in retrieving fines unpaid tickets for related accounts: ' + qe.getMessage());
                            Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                            Logger.saveLog();
                        }
                    }
                } else {
                    try {
                        openTickets = [
                            SELECT
                            Date_of_Ticket__c,
                            Name,
                            Driver_Full_Name__c,
                            Carrier__c,
                            Carrier__r.Name,
                            Final_Fine__c,
                            Fine_Due_Date__c,
                            Attorney_Status__c,
                            Ticket_Outcome__c,
                            TicketType__c
                            FROM Ticket__c
                            WHERE Carrier__c = :contactId
                            AND Final_Fine__c > 0
                            AND (Fine_Due_Date__c = TODAY OR Fine_Due_Date__c > TODAY OR Fine_Due_Date__c = LAST_N_DAYS:30)
                        ];
                    } catch (QueryException qe) {
                        System.debug('QueryException in retrieving fines unpaid tickets for a specific contact: ' + qe.getMessage());
                        Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    }
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException in getFinesUnpaidTickets: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('An unexpected error occurred in getFinesUnpaidTickets: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return openTickets;
        }
        
        private static List<Ticket__c> getClosedTickets(String contactId, String type) {
            List<Ticket__c> closedTickets = new List<Ticket__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        closedTickets = [
                            SELECT
                            Date_of_Ticket__c,
                            Name,
                            Driver_Full_Name__c,
                            Carrier__c,
                            Carrier__r.Name,
                            Violation_Description__c,
                            Violation_Category__c,
                            Court_Date__c,
                            Attorney_Status__c,
                            Ticket_City__c,
                            Ticket_State__c,
                            Ticket_Outcome__c,
                            TicketType__c
                            FROM Ticket__c
                            WHERE
                            (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            AND Attorney_Status__c = 'Ticket Closed'
                        ];
                    }
                } else {
                    closedTickets = [
                        SELECT
                        Date_of_Ticket__c,
                        Name,
                        Driver_Full_Name__c,
                        Carrier__c,
                        Carrier__r.Name,
                        Violation_Description__c,
                        Violation_Category__c,
                        Court_Date__c,
                        Attorney_Status__c,
                        Ticket_City__c,
                        Ticket_State__c,
                        Ticket_Outcome__c,
                        TicketType__c
                        FROM Ticket__c
                        WHERE Carrier__c = :contactId AND Attorney_Status__c = 'Ticket Closed'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                Logger.error(de.getMessage(), de).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception ex) {
                System.debug('Exception: ' + ex.getMessage());
                Logger.error(ex.getMessage(), ex).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return closedTickets;
        }
        
        private static List<Ticket__c> getUpcomingTickets(String contactId, String type) {
            List<Ticket__c> upcomingTickets = new List<Ticket__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        upcomingTickets = [
                            SELECT
                            Court_Date__c, Carrier__r.Name,
                            Name,
                            Driver_Full_Name__c,
                            Violation_Category__c
                            FROM Ticket__c
                            WHERE
                            (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            AND Attorney_Status__c != 'Ticket Closed'
                        ];
                    }
                } else {
                    upcomingTickets = [
                        SELECT
                        Court_Date__c,Carrier__r.Name,
                        Name,
                        Driver_Full_Name__c,
                        Violation_Category__c
                        FROM Ticket__c
                        WHERE Carrier__c = :contactId AND Attorney_Status__c != 'Ticket Closed'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                Logger.error(de.getMessage(), de).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception ex) {
                System.debug('Exception: ' + ex.getMessage());
                Logger.error(ex.getMessage(), ex).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return upcomingTickets;
        }
        
        private static List<Ticket__c> getRecentTickets(String contactId, String type) {
            List<Ticket__c> openTickets = new List<Ticket__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        openTickets = [
                            SELECT
                            Name, Carrier__r.Name
                            FROM Ticket__c
                            WHERE
                            (Carrier__c = :parentAccount.Id
                             OR Carrier__c IN :relatedAccountIds)
                            ORDER BY LastReferencedDate DESC NULLS LAST,
                            LastViewedDate DESC NULLS LAST 
                            LIMIT 10
                        ];
                    }
                } else {
                    openTickets = [
                        SELECT
                        Name, Carrier__r.Name
                        FROM Ticket__c
                        WHERE Carrier__c = :contactId 
                        ORDER BY LastReferencedDate DESC NULLS LAST,
                        LastViewedDate DESC NULLS LAST 
                        LIMIT 10
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (DmlException de) {
                System.debug('DmlException: ' + de.getMessage());
                Logger.error(de.getMessage(), de).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception ex) {
                System.debug('Exception: ' + ex.getMessage());
                Logger.error(ex.getMessage(), ex).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openTickets;
        }
        
        
        private static List<Inspection__c> getOpenChallenges(
            String contactId,
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            
            try {
                Id checkObjectId = (Id) contactId;
                
                // Validate the object type and type parameter
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    try {
                        // Retrieve related account data
                        Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                        
                        if (accountData.get('parentAccount') != null && accountData.get('parentAccount').size() > 0) {
                            Account parentAccount = accountData.get('parentAccount')[0];
                            List<Id> relatedAccountIds = new List<Id>();
                            
                            if (accountData.get('relatedAccounts') != null) {
                                for (Account acc : accountData.get('relatedAccounts')) {
                                    relatedAccountIds.add(acc.Id);
                                }
                            }
                            
                            try {
                                openChallenges = [
                                    SELECT
                                    Name,
                                    Status__c,
                                    Ticket_Fine_Amount__c,
                                    Ticket_Fine_Due_Date__c,
                                    DataQ_Outcome__c,
                                    Driver_Name__c,Driver__c,
                                    Carrier__c,
                                    Associated_Ticket__r.Name,
                                    Ticket_Violation_Description__c,
                                    Ticket_Date__c,
                                    Ticket_Outcome__c,
                                    Carrier__r.Name
                                    FROM Inspection__c
                                    WHERE
                                    (Carrier__c = :parentAccount.Id
                                     OR Carrier__c IN :relatedAccountIds)
                                    AND Status__c != 'Closed'
                                ];
                                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                                Logger.saveLog();
                            } catch (QueryException qe) {
                                System.debug('QueryException in retrieving inspections for related accounts: ' + qe.getMessage());
                                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                                Logger.saveLog();
                            }
                        } else {
                            System.debug('No parent account found for the provided contact.');
                        }
                        Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    } catch (NullPointerException npe) {
                        System.debug('NullPointerException while processing related accounts: ' + npe.getMessage());
                        Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    }
                } else {
                    try {
                        openChallenges = [
                            SELECT
                            Name,
                            Status__c,
                            Ticket_Fine_Amount__c,
                            Ticket_Fine_Due_Date__c,
                            DataQ_Outcome__c,
                            Driver_Name__c,Driver__c,
                            Carrier__c,
                            Associated_Ticket__r.Name,
                            Ticket_Violation_Description__c,
                            Ticket_Date__c,
                            Ticket_Outcome__c,
                            Carrier__r.Name
                            FROM Inspection__c
                            WHERE Carrier__c = :contactId AND Status__c != 'Closed'
                        ];
                        Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    } catch (QueryException qe) {
                        System.debug('QueryException in retrieving inspections for a specific contact: ' + qe.getMessage());
                        Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                        Logger.saveLog();
                    }
                }
            } catch (NullPointerException npe) {
                System.debug('NullPointerException in main block: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('An unexpected error occurred in getOpenChallenges: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return openChallenges;
        }
        
        
        private static List<Inspection__c> getAllChallenges(
            String contactId, 
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData != null && accountData.get('parentAccount') != null && !accountData.get('parentAccount').isEmpty()) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        if (accountData.get('relatedAccounts') != null) {
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                        }
                        openChallenges = [
                            SELECT Name, Status__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c,Driver__c,
                            Driver_Name__c, Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c, 
                            Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                            FROM Inspection__c
                            WHERE (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                        ];
                    }
                } else {
                    openChallenges = [
                        SELECT Name, Status__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c,Driver__c,
                        Driver_Name__c, Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c,
                        Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openChallenges;
        }
        
        private static List<Inspection__c> getAwaitingFinesPaidChallenges(
            String contactId, 
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData != null && accountData.get('parentAccount') != null && !accountData.get('parentAccount').isEmpty()) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        if (accountData.get('relatedAccounts') != null) {
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                        }
                        openChallenges = [
                            SELECT Name, Status__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c,Driver__c,
                            Driver_Name__c, Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c,
                            Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                            FROM Inspection__c
                            WHERE (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            AND Status__c = 'Fines need to be paid'
                            AND Ticket_Fine_Amount__c > 0
                        ];
                    }
                } else {
                    openChallenges = [
                        SELECT Name, Status__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c,Driver__c,
                        Driver_Name__c, Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c,
                        Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId
                        AND Status__c = 'Fines need to be paid'
                        AND Ticket_Fine_Amount__c > 0
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openChallenges;
        }
        
        
        private static List<Inspection__c> getClosedChallenges(
            String contactId,
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData != null && accountData.get('parentAccount') != null && accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        if (accountData.get('relatedAccounts') != null) {
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                        }
                        openChallenges = [
                            SELECT Name, Status__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c, Driver_Name__c,Driver__c,
                            Carrier__c, Associated_Ticket__r.name, Ticket_Violation_Description__c, Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                            FROM Inspection__c
                            WHERE (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            AND Status__c = 'Closed'
                        ];
                    }
                } else {
                    openChallenges = [
                        SELECT Name, Status__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c, Driver_Name__c,Driver__c,
                        Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c, Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId
                        AND Status__c = 'Closed'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openChallenges;
        }
        
        private static List<Inspection__c> getDataQEnteredChallenges(
            String contactId,
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData != null && accountData.get('parentAccount') != null && accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        if (accountData.get('relatedAccounts') != null) {
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                        }
                        openChallenges = [
                            SELECT Name, Status__c, DataQ_ID__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c, Driver_Name__c,Driver__c,
                            Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c, Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                            FROM Inspection__c
                            WHERE (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            AND Status__c != 'Closed' 
                            AND DataQ_ID__c != ' '
                        ];
                    }
                } else {
                    openChallenges = [
                        SELECT Name, Status__c, DataQ_ID__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c, Driver_Name__c,Driver__c,
                        Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c, Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId
                        AND Status__c != 'Closed'
                        AND DataQ_ID__c != ' '
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openChallenges;
        }
        
        private static List<Inspection__c> getORiellyChallenges(
            String contactId,
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            try {
                Id checkObjectId = (Id) contactId;
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    if (accountData != null && accountData.get('parentAccount') != null && accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        if (accountData.get('relatedAccounts') != null) {
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                        }
                        openChallenges = [
                            SELECT Name, Status__c, DataQ_ID__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c, Driver_Name__c,
                            Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c, Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                            FROM Inspection__c
                            WHERE (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            AND Status__c != 'Closed'
                            AND DataQ_Outcome__c = 'OAP'
                        ];
                    }
                } else {
                    openChallenges = [
                        SELECT Name, Status__c, DataQ_ID__c, Ticket_Fine_Amount__c, Ticket_Fine_Due_Date__c, DataQ_Outcome__c, Driver_Name__c,
                        Carrier__c, Associated_Ticket__r.Name, Ticket_Violation_Description__c, Ticket_Date__c, Ticket_Outcome__c, Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId
                        AND Status__c != 'Closed'
                        AND DataQ_Outcome__c = 'OAP'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openChallenges;
        }
        
        private static List<Inspection__c> getRecentChallenges(
            String contactId,
            String type
        ) {
            List<Inspection__c> openChallenges = new List<Inspection__c>();
            try {
                Id checkObjectId = (Id) contactId;
                
                // Check if the object is of type Contact and type is 'full'
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    // Call the method to get parent and related accounts
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    // Check if parentAccount is available and relatedAccounts is not null
                    if (accountData != null && accountData.containsKey('parentAccount') && accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        
                        // Initialize related account IDs
                        List<Id> relatedAccountIds = new List<Id>();
                        if (accountData.containsKey('relatedAccounts') && accountData.get('relatedAccounts').size() > 0) {
                            for (Account acc : accountData.get('relatedAccounts')) {
                                relatedAccountIds.add(acc.Id);
                            }
                        }
                        
                        // Query open challenges for the parent account and related accounts
                        openChallenges = [
                            SELECT Id, Name, LastReferencedDate, LastViewedDate,Carrier__r.Name
                            FROM Inspection__c
                            WHERE (Carrier__c = :parentAccount.Id OR Carrier__c IN :relatedAccountIds)
                            ORDER BY LastReferencedDate DESC NULLS LAST, LastViewedDate DESC NULLS LAST 
                            LIMIT 10
                        ];
                    }
                } else {
                    // Query open challenges for the contact if type is not 'full'
                    openChallenges = [
                        SELECT Id, Name, LastReferencedDate, LastViewedDate,Carrier__r.Name
                        FROM Inspection__c
                        WHERE Carrier__c = :contactId 
                        ORDER BY LastReferencedDate DESC NULLS LAST, LastViewedDate DESC NULLS LAST 
                        LIMIT 10
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return openChallenges;
        }
        
        
        private static List<SMS_Violation_Data__c> getSMSPointsBasic(
            String contactId,
            String type
        ) {
            
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> smsPoints = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        smsPoints = [
                            SELECT 
                            SMS_Inspection_Data__r.Report_State__c,
                            SMS_Inspection_Data__r.Inspection_Date__c,
                            SMS_Inspection_Data__r.Driver_Name__r.Name,
                            Basic_Description__c,
                            Group_Description__c,
                            Violation_Code_Link__c,
                            Violation_Code__c,
                            Section_Description__c,
                            Severity_Weight__c, 
                            Violation_Value__c,
                            SMS_Inspection_Data__r.Report_Number__c , 
                            SMS_Inspection_Data__r.Account__c,
                            SMS_Inspection_Data__r.Account__r.Name,
                            SMS_Inspection_Data__r.Time_Weight__c,
                            SMS_Inspection_Data__r.Unit_Type_Desc__c,
                            SMS_Inspection_Data__r.VIN__c,
                            SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                            SMS_Inspection_Data__r.Unit_License__c,
                            SMS_Inspection_Data__r.Unit_License2__c,
                            SMS_Inspection_Data__r.VIN2__c
                            FROM SMS_Violation_Data__c
                            WHERE
                            (Account__c = :parentAccount.Id
                             OR Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                        ];
                    }
                } else {
                    smsPoints = [
                        SELECT 
                        SMS_Inspection_Data__r.Report_State__c,
                        SMS_Inspection_Data__r.Inspection_Date__c,
                        SMS_Inspection_Data__r.Driver_Name__r.Name,
                        Basic_Description__c,
                        Group_Description__c,
                        Violation_Code_Link__c,Violation_Code__c,
                        Section_Description__c,
                        Severity_Weight__c,
                        Violation_Value__c,
                        SMS_Inspection_Data__r.Report_Number__c , 
                        SMS_Inspection_Data__r.Account__c,
                        SMS_Inspection_Data__r.Account__r.Name,
                        SMS_Inspection_Data__r.Time_Weight__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc__c,
                        SMS_Inspection_Data__r.VIN__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                        SMS_Inspection_Data__r.Unit_License__c,
                        SMS_Inspection_Data__r.Unit_License2__c,
                        SMS_Inspection_Data__r.VIN2__c
                        FROM SMS_Violation_Data__c
                        WHERE
                        Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(exception e){
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return smsPoints;
            
        }
        
        
        // private static Map<String, Object> flattenMap(Map<String, Object>)
        
        private static List<SMS_Violation_Data__c> getSMSPointsBasicByState(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> smsPoints = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        smsPoints = [
                            SELECT 
                            SMS_Inspection_Data__r.Report_State__c,
                            SMS_Inspection_Data__r.Inspection_Date__c,
                            SMS_Inspection_Data__r.Driver_Name__r.Name,
                            Basic_Description__c,
                            Group_Description__c,
                            Violation_Code_Link__c,
                            Violation_Code__c,
                            Section_Description__c,
                            Severity_Weight__c, 
                            Violation_Value__c,
                            SMS_Inspection_Data__r.Report_Number__c , 
                            SMS_Inspection_Data__r.Account__c,
                            SMS_Inspection_Data__r.Account__r.Name,
                            SMS_Inspection_Data__r.Time_Weight__c,
                            SMS_Inspection_Data__r.Unit_Type_Desc__c,
                            SMS_Inspection_Data__r.VIN__c,
                            SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                            SMS_Inspection_Data__r.Unit_License__c,
                            SMS_Inspection_Data__r.Unit_License2__c,
                            SMS_Inspection_Data__r.VIN2__c
                            FROM SMS_Violation_Data__c
                            WHERE
                            (Account__c = :parentAccount.Id
                             OR Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                        ];
                    }
                } else {
                    smsPoints = [
                        SELECT 
                        SMS_Inspection_Data__r.Report_State__c,
                        SMS_Inspection_Data__r.Inspection_Date__c,
                        SMS_Inspection_Data__r.Driver_Name__r.Name,
                        Basic_Description__c,
                        Group_Description__c,
                        Violation_Code_Link__c,Violation_Code__c,
                        Section_Description__c,
                        Severity_Weight__c,
                        Violation_Value__c,
                        SMS_Inspection_Data__r.Report_Number__c , 
                        SMS_Inspection_Data__r.Account__c,
                        SMS_Inspection_Data__r.Account__r.Name,
                        SMS_Inspection_Data__r.Time_Weight__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc__c,
                        SMS_Inspection_Data__r.VIN__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                        SMS_Inspection_Data__r.Unit_License__c,
                        SMS_Inspection_Data__r.Unit_License2__c,
                        SMS_Inspection_Data__r.VIN2__c
                        FROM SMS_Violation_Data__c
                        WHERE
                        Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return smsPoints;
        }
        
        private static List<SMS_Violation_Data__c> getBasicViolations(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> basicViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        basicViolations = [
                            SELECT 
                            SMS_Inspection_Data__r.Inspection_Date__c,
                            Basic_Description__c, 
                            Group_Description__c,
                            Violation_Code_Link__c,Violation_Code__c,
                            Section_Description__c,
                            Severity_Weight__c, 
                            Violation_Value__c,
                            SMS_Inspection_Data__r.Report_Number__c ,
                            SMS_Inspection_Data__r.Account__c,
                            SMS_Inspection_Data__r.Account__r.Name,
                            Time_Weight__c,
                            SMS_Inspection_Data__r.Unit_Type_Desc__c,
                            SMS_Inspection_Data__r.VIN__c, 
                            SMS_Inspection_Data__r.Unit_Type_Desc2__c, 
                            SMS_Inspection_Data__r.Unit_License2__c,
                            SMS_Inspection_Data__r.VIN2__c
                            FROM SMS_Violation_Data__c
                            WHERE
                            (SMS_Inspection_Data__r.Account__c = :parentAccount.Id
                             OR SMS_Inspection_Data__r.Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND SMS_Inspection_Data__r.Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                        ];
                    }
                } else {
                    basicViolations = [
                        SELECT 
                        SMS_Inspection_Data__r.Inspection_Date__c,
                        Basic_Description__c, 
                        Group_Description__c,
                        Violation_Code_Link__c,Violation_Code__c,
                        Section_Description__c,
                        Severity_Weight__c, 
                        Violation_Value__c,
                        SMS_Inspection_Data__r.Report_Number__c ,
                        SMS_Inspection_Data__r.Account__c,
                        SMS_Inspection_Data__r.Account__r.Name,
                        Time_Weight__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc__c,
                        SMS_Inspection_Data__r.VIN__c, 
                        SMS_Inspection_Data__r.Unit_Type_Desc2__c, 
                        SMS_Inspection_Data__r.Unit_License2__c,
                        SMS_Inspection_Data__r.VIN2__c
                        FROM SMS_Violation_Data__c
                        WHERE
                        SMS_Inspection_Data__r.Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return basicViolations;
        }
        
        private static List<SMS_Violation_Data__c> getUnsafeDrivingViolations(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> unsafeDrivingViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        unsafeDrivingViolations = [
                            SELECT
                            SMS_Inspection_Data__r.Inspection_Date__c, 
                            SMS_Inspection_Data__r.Name,
                            SMS_Inspection_Data__r.Report_Number__c ,
                            Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                            SMS_Inspection_Data__r.Account__r.Name
                            FROM SMS_Violation_Data__c
                            WHERE
                            Basic_Description__c = 'Unsafe Driving'
                            AND
                            (SMS_Inspection_Data__r.Account__c = :parentAccount.Id
                             OR SMS_Inspection_Data__r.Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND SMS_Inspection_Data__r.Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                        ];
                    }
                } else {
                    unsafeDrivingViolations = [
                        SELECT
                        SMS_Inspection_Data__r.Inspection_Date__c, 
                        SMS_Inspection_Data__r.Name,
                        SMS_Inspection_Data__r.Report_Number__c ,
                        Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                        SMS_Inspection_Data__r.Account__r.Name
                        FROM SMS_Violation_Data__c
                        WHERE Basic_Description__c = 'Unsafe Driving' AND
                        SMS_Inspection_Data__r.Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return unsafeDrivingViolations;
        }
        
        
        private static List<SMS_Violation_Data__c> getVehicleMaintenanceViolations(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> vehicleMaintenanceViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        vehicleMaintenanceViolations = [
                            SELECT
                            SMS_Inspection_Data__r.Inspection_Date__c, 
                            SMS_Inspection_Data__r.Name,
                            SMS_Inspection_Data__r.Report_Number__c ,
                            Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                            SMS_Inspection_Data__r.Account__r.Name
                            FROM SMS_Violation_Data__c
                            WHERE
                            (SMS_Inspection_Data__r.Account__c = :parentAccount.Id
                             OR SMS_Inspection_Data__r.Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND SMS_Inspection_Data__r.Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25 
                            AND Basic_Description__c = 'Vehicle Maintenance'
                        ];
                    }
                } else {
                    vehicleMaintenanceViolations = [
                        SELECT
                        SMS_Inspection_Data__r.Inspection_Date__c, 
                        SMS_Inspection_Data__r.Name,
                        SMS_Inspection_Data__r.Report_Number__c ,
                        Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                        SMS_Inspection_Data__r.Account__r.Name
                        FROM SMS_Violation_Data__c
                        WHERE
                        SMS_Inspection_Data__r.Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                        AND Basic_Description__c = 'Vehicle Maintenance'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return vehicleMaintenanceViolations;
        }
        
        
        private static List<SMS_Violation_Data__c> getHoursOfServiceViolations(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> hoursOfServiceViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        hoursOfServiceViolations = [
                            SELECT
                            SMS_Inspection_Data__r.Inspection_Date__c, 
                            SMS_Inspection_Data__r.Name,
                            SMS_Inspection_Data__r.Report_Number__c ,
                            Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                            SMS_Inspection_Data__r.Account__r.Name
                            FROM SMS_Violation_Data__c
                            WHERE
                            (SMS_Inspection_Data__r.Account__c = :parentAccount.Id
                             OR SMS_Inspection_Data__r.Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND SMS_Inspection_Data__r.Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25 
                            AND Basic_Description__c = 'Hours-of-Service'
                        ];
                    }
                } else {
                    hoursOfServiceViolations = [
                        SELECT
                        SMS_Inspection_Data__r.Inspection_Date__c, 
                        SMS_Inspection_Data__r.Name,
                        SMS_Inspection_Data__r.Report_Number__c ,
                        Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                        SMS_Inspection_Data__r.Account__r.Name
                        FROM SMS_Violation_Data__c
                        WHERE
                        Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25 
                        AND Basic_Description__c = 'Hours-of-Service'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return hoursOfServiceViolations;
        }
        
        private static List<SMS_Violation_Data__c> getDriverFitnessViolations(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> driverFitnessViolations = new List<SMS_Violation_Data__c>();
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        driverFitnessViolations = [
                            SELECT
                            SMS_Inspection_Data__r.Inspection_Date__c, 
                            SMS_Inspection_Data__r.Name,
                            SMS_Inspection_Data__r.Report_Number__c ,
                            Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                            SMS_Inspection_Data__r.Account__r.Name
                            FROM SMS_Violation_Data__c
                            WHERE
                            (SMS_Inspection_Data__r.Account__c = :parentAccount.Id
                             OR SMS_Inspection_Data__r.Account__c IN :relatedAccountIds)
                            AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                            AND SMS_Inspection_Data__r.Archived__c = FALSE
                            AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                            AND Basic_Description__c = 'Driver Fitness'
                        ];
                    }
                } else {
                    driverFitnessViolations = [
                        SELECT
                        SMS_Inspection_Data__r.Inspection_Date__c, 
                        SMS_Inspection_Data__r.Name,
                        SMS_Inspection_Data__r.Report_Number__c ,
                        Name,  Group_Description__c, Time_Weight__c,Severity_Weight__c, Violation_Value__c,
                        SMS_Inspection_Data__r.Account__r.Name
                        FROM SMS_Violation_Data__c
                        WHERE
                        Account__c = :contactId
                        AND SMS_Inspection_Data__r.BASIC_Violation__c != 0
                        AND SMS_Inspection_Data__r.Archived__c = FALSE
                        AND SMS_Inspection_Data__r.Inspection_Date__c = LAST_N_MONTHS:25
                        AND Basic_Description__c = 'Driver Fitness'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return driverFitnessViolations;
        }
        
        private static List<SMS_Violation_Data__c> mySMSDataSummary(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Violation_Data__c> driverFitnessViolations = new List<SMS_Violation_Data__c>();
            
            
            try{
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        driverFitnessViolations = [
                            SELECT 
                            SMS_Inspection_Data__r.Inspection_Date__c,
                            SMS_Inspection_Data__r.Driver_Name__r.Name,
                            SMS_Inspection_Data__r.Account__r.Name, 
                            Basic_Description__c, 
                            Group_Description__c,
                            Violation_Code_Link__c,
                            Violation_Code__c,
                            Section_Description__c,
                            Severity_Weight__c, 
                            Violation_Value__c, 
                            SMS_Inspection_Data__r.Report_State__c,
                            SMS_Inspection_Data__r.Report_Number__c ,
                            SMS_Inspection_Data__r.Report_Number_with_State__c,
                            SMS_Inspection_Data__r.Account__c, 
                            SMS_Inspection_Data__r.Time_Weight__c,
                            SMS_Inspection_Data__r.Unit_Type_Desc__c,
                            SMS_Inspection_Data__r.VIN__c, 
                            SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                            SMS_Inspection_Data__r.Unit_License__c, 
                            SMS_Inspection_Data__r.Unit_License2__c,
                            SMS_Inspection_Data__r.VIN2__c
                            FROM SMS_Violation_Data__c
                            WHERE
                            (SMS_Inspection_Data__r.Account__c = :parentAccount.Id
                             OR SMS_Inspection_Data__r.Account__c IN :relatedAccountIds)
                            // AND Inspection_Date__c = LAST_N_DAYS:180
                        ];
                    }
                } else {
                    driverFitnessViolations = [
                        SELECT 
                        SMS_Inspection_Data__r.Inspection_Date__c,
                        SMS_Inspection_Data__r.Driver_Name__r.Name,
                        SMS_Inspection_Data__r.Account__r.Name, 
                        Basic_Description__c, 
                        Group_Description__c,
                        Violation_Code_Link__c,
                        Violation_Code__c,
                        Section_Description__c,
                        Severity_Weight__c, 
                        Violation_Value__c, 
                        SMS_Inspection_Data__r.Report_State__c,
                        SMS_Inspection_Data__r.Report_Number__c ,
                        SMS_Inspection_Data__r.Report_Number_with_State__c,
                        SMS_Inspection_Data__r.Account__c, 
                        SMS_Inspection_Data__r.Time_Weight__c,
                        SMS_Inspection_Data__r.Unit_Type_Desc__c,
                        SMS_Inspection_Data__r.VIN__c, 
                        SMS_Inspection_Data__r.Unit_Type_Desc2__c,
                        SMS_Inspection_Data__r.Unit_License__c, 
                        SMS_Inspection_Data__r.Unit_License2__c,
                        SMS_Inspection_Data__r.VIN2__c
                        FROM SMS_Violation_Data__c
                        WHERE SMS_Inspection_Data__r.Account__c = :contactId 
                        //AND
                        //Inspection_Date__c = LAST_N_DAYS:180
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return driverFitnessViolations;
        }
        
        private static List<SMS_Inspection_Data__c> mySMSDataInspectionsAll(
            String contactId,
            String type
        ) {
            List<SMS_Inspection_Data__c> inspections = new List<SMS_Inspection_Data__c>();
            Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
            
            try{
                
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        inspections = [
                            SELECT
                            Report_Number__c,
                            DOT_Number__c,
                            Driver_Name__r.Name,
                            BASIC_Violation__c,
                            Inspection_Date__c,
                            Inspection_Level_ID__c,
                            Report_State__c,
                            County_Code_State__c,
                            OOS_Total__c,
                            Time_Weight__c, CreatedDate
                            FROM SMS_Inspection_Data__c
                            WHERE
                            Account__c = :parentAccount.Id
                            OR Account__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    inspections = [
                        SELECT
                        Report_Number__c,
                        DOT_Number__c,
                        Driver_Name__r.Name,
                        BASIC_Violation__c,
                        Inspection_Date__c,
                        Inspection_Level_ID__c,
                        Report_State__c,
                        County_Code_State__c,
                        OOS_Total__c,
                        Time_Weight__c, CreatedDate
                        FROM SMS_Inspection_Data__c
                        WHERE Account__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return inspections;
        }
        
        private static List<SMS_Inspection_Data__c> mySMSDataInspectionsInspect(
            String contactId,
            String type
        ) {
            List<SMS_Inspection_Data__c> inspections = new List<SMS_Inspection_Data__c>();
            
            
            try{
                Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
                
                
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        inspections = [
                            SELECT
                            Inspection_Date__c,
                            Report_State__c,
                            Report_Number__c,
                            Driver_Name__r.Name,
                            VIN__c,
                            BASIC_Violation__c,
                            Inspection_Level_ID__c,
                            OOS_Total__c
                            FROM SMS_Inspection_Data__c
                            WHERE
                            Account__c = :parentAccount.Id
                            OR Account__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    inspections = [
                        SELECT
                        Inspection_Date__c,
                        Report_State__c,
                        Report_Number__c,
                        Driver_Name__r.Name,
                        VIN__c,
                        BASIC_Violation__c,
                        Inspection_Level_ID__c,
                        OOS_Total__c
                        FROM SMS_Inspection_Data__c
                        WHERE Account__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return inspections;
        }
        
        private static List<SMS_Inspection_Data__c> MySMSDataInspectionswithoutDriver(
            String contactId,
            String type
        ) {
            List<SMS_Inspection_Data__c> inspections = new List<SMS_Inspection_Data__c>();
            
            
            
            try{
                Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
                
                
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        inspections = [
                            SELECT
                            Inspection_Date__c,
                            Report_Number__c,
                            Inspection_Level_ID__c,
                            Driver_Name__r.Name,
                            BASIC_Violation__c,
                            OOS_Total__c,
                            VIN__c,
                            Unit_License__c,
                            VIN2__c,
                            Unit_License2__c
                            FROM SMS_Inspection_Data__c
                            WHERE
                            (Account__c = :parentAccount.Id
                             OR Account__c IN :relatedAccountIds) 
                            AND Driver_Name__c = Null
                        ];
                    }
                } else {
                    inspections = [
                        SELECT
                        Inspection_Date__c,
                        Report_Number__c,
                        Inspection_Level_ID__c,
                        Driver_Name__r.Name,
                        BASIC_Violation__c,
                        OOS_Total__c,
                        VIN__c,
                        Unit_License__c,
                        VIN2__c,
                        Unit_License2__c
                        FROM SMS_Inspection_Data__c
                        WHERE Account__c = :contactId AND Driver_Name__c = Null
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return inspections;
        }
        
        private static List<SMS_Inspection_Data__c> MySMSDataInspectionsRecent(
            String contactId,
            String type
        ) {
            List<SMS_Inspection_Data__c> inspections = new List<SMS_Inspection_Data__c>();
            
            try{
                Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
                
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        inspections = [
                            SELECT Report_Number__c, Inspection_Date__c, Name
                            FROM SMS_Inspection_Data__c
                            WHERE
                            (Account__c = :parentAccount.Id
                             OR Account__c IN :relatedAccountIds)
                            ORDER BY LastReferencedDate 
                            DESC NULLS LAST,
                            LastViewedDate DESC NULLS LAST 
                            LIMIT 10
                        ];
                    }
                } else {
                    inspections = [
                        SELECT Report_Number__c, Inspection_Date__c, Name
                        FROM SMS_Inspection_Data__c
                        WHERE Account__c = :contactId
                        ORDER BY LastReferencedDate 
                        DESC NULLS LAST,
                        LastViewedDate DESC NULLS LAST 
                        LIMIT 10
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return inspections;
        }
        
        private static List<SMS_Violation_Data__c> MySMSDataViolationAll(
            String contactId,
            String type
        ) {
            List<SMS_Violation_Data__c> violations = new List<SMS_Violation_Data__c>();
            
            try{
                Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
                
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        violations = [
                            SELECT
                            Name,
                            Basic_Description__c,
                            DOT_Number__c,
                            OOS_Indicator__c,
                            OOS_Weight__c,
                            Inspection_Date__c,
                            Group_Description__c,
                            Violation_Code__c,
                            Violation_Unit__c,
                            Violation_Value__c, 
                            Section_Description__c,
                            Severity_Weight__c,
                            Time_Weight_Calculated__c,
                            Time_Weight__c,
                            Violation_Score_Total__c
                            FROM SMS_Violation_Data__c
                            WHERE
                            Account__c = :parentAccount.Id
                            OR Account__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    violations = [
                        SELECT
                        Name,
                        Basic_Description__c,
                        DOT_Number__c,
                        OOS_Indicator__c,
                        OOS_Weight__c,
                        Inspection_Date__c,
                        Group_Description__c,
                        Violation_Code__c,
                        Violation_Unit__c,
                        Violation_Value__c,
                        Section_Description__c,
                        Severity_Weight__c,
                        Time_Weight_Calculated__c,
                        Time_Weight__c,
                        Violation_Score_Total__c
                        FROM SMS_Violation_Data__c
                        WHERE Account__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return violations;
        }
        
        private static List<SMS_Violation_Data__c> MySMSDataViolationRecent(
            String contactId,
            String type
        ) {
            List<SMS_Violation_Data__c> violations = new List<SMS_Violation_Data__c>();
            
            try{
                Id checkObjectId = (Id) contactId;
            Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                contactId
            );
                
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        violations = [
                            SELECT
                            Name
                            FROM SMS_Violation_Data__c
                            WHERE
                            (Account__c = :parentAccount.Id
                             OR Account__c IN :relatedAccountIds)
                            ORDER BY LastReferencedDate 
                            DESC NULLS LAST,
                            LastViewedDate DESC NULLS LAST 
                            LIMIT 10
                        ];
                    }
                } else {
                    violations = [
                        SELECT
                        Name
                        FROM SMS_Violation_Data__c
                        WHERE Account__c = :contactId
                        ORDER BY LastReferencedDate 
                        DESC NULLS LAST,
                        LastViewedDate DESC NULLS LAST 
                        LIMIT 10
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return violations;
        }
        
        
        private static List<SMS_Notify_Violation__c> SMSNotifyNotificationToday(String contactId,String type) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Violation__c> driverFitnessViolations = new List<SMS_Notify_Violation__c>();
            
            try {
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for driver fitness violations for parent and related accounts
                        driverFitnessViolations = [
                            SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c,
                            SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                            Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                            from SMS_Notify_Violation__c
                            WHERE
                            (SMS_Notify__r.Carrier_Lookup__c = :parentAccount.Id
                             OR SMS_Notify__r.Carrier_Lookup__c IN :relatedAccountIds)
                            AND SMS_Notify__r.CreatedDate = TODAY
                        ];
                    }
                } else {
                    // Handle case for contact not starting with '003' or type not 'full'
                    driverFitnessViolations = [
                        SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c,
                        SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                        Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                        from SMS_Notify_Violation__c
                        WHERE SMS_Notify__r.Carrier_Lookup__c = :contactId AND SMS_Notify__r.CreatedDate = TODAY
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException e) {
                System.debug('Null Pointer Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle null pointer exception
            } catch (QueryException e) {
                System.debug('Query Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle query exception
            } catch (Exception e) {
                System.debug('Unexpected Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle any other exceptions
            }
            
            return driverFitnessViolations;
        }
        
        private static List<SMS_Notify_Violation__c> SMSNotifyNotification7days(String contactId,String type) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Violation__c> driverFitnessViolations = new List<SMS_Notify_Violation__c>();
            
            try {
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for driver fitness violations for parent and related accounts
                        driverFitnessViolations = [
                            SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c,
                            SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                            Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                            from SMS_Notify_Violation__c
                            WHERE
                            (SMS_Notify__r.Carrier_Lookup__c = :parentAccount.Id
                             OR SMS_Notify__r.Carrier_Lookup__c IN :relatedAccountIds)
                            AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:7
                        ];
                    }
                } else {
                    // Handle case for contact not starting with '003' or type not 'full'
                    driverFitnessViolations = [
                        SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c,
                        SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                        Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                        from SMS_Notify_Violation__c
                        WHERE SMS_Notify__r.Carrier_Lookup__c = :contactId 
                        AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:7
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException e) {
                System.debug('Null Pointer Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle null pointer exception
            } catch (QueryException e) {
                System.debug('Query Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle query exception
            } catch (Exception e) {
                System.debug('Unexpected Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle any other exceptions
            }
            
            return driverFitnessViolations;
        }
        
        private static List<SMS_Notify_Violation__c> SMSNotifyCleanNotification7days(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Violation__c> driverFitnessViolations = new List<SMS_Notify_Violation__c>();
            
            try {
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for driver fitness violations for parent and related accounts
                        driverFitnessViolations = [
                            SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c, SMS_Notify__r.Driver_Lookup__r.Name,
                            SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                            Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                            from SMS_Notify_Violation__c
                            WHERE
                            (SMS_Notify__r.Carrier_Lookup__c = :parentAccount.Id
                             OR SMS_Notify__r.Carrier_Lookup__c IN :relatedAccountIds)
                            AND SMS_Notify__r.Clean_Insp__c != 'YES'
                            AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:7
                        ];
                    }
                } else {
                    // Handle case for contact not starting with '003' or type not 'full'
                    driverFitnessViolations = [
                        SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c,SMS_Notify__r.Driver_Lookup__r.Name,
                        SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                        Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                        from SMS_Notify_Violation__c
                        WHERE SMS_Notify__r.Carrier_Lookup__c = :contactId
                        AND SMS_Notify__r.Clean_Insp__c != 'YES'
                        AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:7
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException e) {
                System.debug('Null Pointer Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle null pointer exception
            } catch (QueryException e) {
                System.debug('Query Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle query exception
            } catch (Exception e) {
                System.debug('Unexpected Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle any other exceptions
            }
            
            return driverFitnessViolations;
        }
        
        private static List<SMS_Notify_Violation__c> SMSNotifyNotification30days(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Violation__c> driverFitnessViolations = new List<SMS_Notify_Violation__c>();
            
            try {
                if (
                    Schema.Contact.sObjectType == checkObjectId.getSobjectType() &&
                    type == 'full'
                ) {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(
                        contactId
                    );
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for driver fitness violations for parent and related accounts
                        driverFitnessViolations = [
                            SELECT SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c,sms_notify__r.Driver_Name__c, sms_notify__r.Driver_Lookup__r.Name,
                            SMS_Notify__r.Clean_Insp__c  , SMS_Notify__r.Name, SMS_Notify__r.Insp_Post_Date__c, 
                            Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                            from SMS_Notify_Violation__c 
                            WHERE
                            (SMS_Notify__r.Carrier_Lookup__c = :parentAccount.Id
                             OR SMS_Notify__r.Carrier_Lookup__c IN :relatedAccountIds)
                            // AND SMS_Notify__r.Clean_Insp__c = 'TRUE'
                            AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:30
                        ];
                    }
                } else {
                    // Handle case for contact not starting with '003' or type not 'full'
                    driverFitnessViolations = [
                        SELECT SMS_Notify__r.Insp_Date__c, sms_notify__r.Driver_Lookup__r.Name,SMS_Notify__r.Insp_Report__c, SMS_Notify__r.Name, SMS_Notify__r.Clean_Insp__c, SMS_Notify__r.Insp_Post_Date__c, 
                        Unit__c, Violations_Category__c, OOS__c, CItation_Y_N__c, Violation_Code__c 
                        from SMS_Notify_Violation__c
                        WHERE SMS_Notify__r.Carrier_Lookup__c = :contactId
                        //  AND SMS_Notify__r.Clean_Insp__c = 'TRUE'
                        AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:30
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException e) {
                System.debug('Null Pointer Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle null pointer exception
            } catch (QueryException e) {
                System.debug('Query Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle query exception
            } catch (Exception e) {
                System.debug('Unexpected Exception: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                // Handle any other exceptions
            }
            
            return driverFitnessViolations;
        }
        
        
        private static List<SMS_Notify_Violation__c> SMSNotifyCommonOffense90days(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Violation__c> driverFitnessViolations = new List<SMS_Notify_Violation__c>();
            
            try {
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for common offenses for parent and related accounts
                        driverFitnessViolations = [
                            SELECT SMS_Notify__r.Id, Violations_Category__c 
                            from SMS_Notify_Violation__c 
                            
                            WHERE
                            (SMS_Notify__r.Carrier_Lookup__c = :parentAccount.Id OR SMS_Notify__r.Carrier_Lookup__c IN :relatedAccountIds)
                            AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:90
                            AND SMS_Notify__r.Clean_Insp__c != 'YES'
                        ];
                    }
                } else {
                    driverFitnessViolations = [
                        SELECT SMS_Notify__r.Id, Violations_Category__c 
                        from SMS_Notify_Violation__c  
                        WHERE SMS_Notify__r.Carrier_Lookup__c = :contactId
                        AND SMS_Notify__r.Insp_Date__c = LAST_N_DAYS:90
                        AND SMS_Notify__r.Clean_Insp__c != 'YES'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return driverFitnessViolations;
        }
        
        private static List<SMS_Notify_Violation__c> SMSNotifyCommonOffenders(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Violation__c> driverFitnessViolations = new List<SMS_Notify_Violation__c>();
            
            try {
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        driverFitnessViolations = [
                            SELECT SMS_Notify__r.Name, SMS_Notify__r.Driver_Name__c, SMS_Notify__r.Driver_Lookup__r.Name, SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c, SMS_Notify__r.Clean_Insp__c, SMS_Notify__r.Insp_Post_Date__c, 
                            Unit__c, Violations_Category__c, OOS__c, Citation_Y_N__c, Violation_Code__c 
                            FROM SMS_Notify_Violation__c
                            WHERE (SMS_Notify__r.Carrier_Lookup__c = :parentAccount.Id OR SMS_Notify__r.Carrier_Lookup__c IN :relatedAccountIds)
                            AND SMS_Notify__r.Clean_Insp__c != 'Yes'
                        ];
                    }
                } else {
                    driverFitnessViolations = [
                        SELECT SMS_Notify__r.Name, SMS_Notify__r.Driver_Name__c, SMS_Notify__r.Driver_Lookup__r.Name, SMS_Notify__r.Insp_Date__c, SMS_Notify__r.Insp_Report__c, SMS_Notify__r.Clean_Insp__c, SMS_Notify__r.Insp_Post_Date__c, 
                        Unit__c, Violations_Category__c, OOS__c, Citation_Y_N__c, Violation_Code__c 
                        FROM SMS_Notify_Violation__c
                        WHERE SMS_Notify__r.Carrier_Lookup__c = :contactId 
                        AND SMS_Notify__r.Clean_Insp__c != 'Yes'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return driverFitnessViolations;
        }
        
        private static List<SMS_Notify_Insp__c> SMSNotifyInspection(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<SMS_Notify_Insp__c> driverFitnessViolations = new List<SMS_Notify_Insp__c>();
            
            try {
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        driverFitnessViolations = [
                            SELECT Insp_Date__c, Insp_Report__c, Driver_Name__c, Driver_Lookup__r.Name, Member_Status__c, Clean_Insp__c,
                            Violation_Count__c, Insp_Total_OOS_Violations__c, Citation_Count__c, Insp_Level_Desc__c, 
                            Insp_Level__c, Post_Crash_Insp__c 
                            FROM SMS_Notify_Insp__c
                            WHERE Carrier_Lookup__c = :parentAccount.Id OR Carrier_Lookup__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    driverFitnessViolations = [
                        SELECT Insp_Date__c, Insp_Report__c, Driver_Name__c, Member_Status__c, Driver_Lookup__r.Name, Clean_Insp__c,
                        Violation_Count__c, Insp_Total_OOS_Violations__c, Citation_Count__c, Insp_Level_Desc__c, 
                        Insp_Level__c, Post_Crash_Insp__c 
                        FROM SMS_Notify_Insp__c
                        WHERE Carrier_Lookup__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return driverFitnessViolations;
        }
        
        private static List<Crash_Details__c> SMSNotifyCrashDetails(
            String contactId,
            String type
        ) {
            Id checkObjectId = (Id) contactId;
            List<Crash_Details__c> driverFitnessViolations = new List<Crash_Details__c>();
            
            try {
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        driverFitnessViolations = [
                            SELECT Crash_Date__c, Crash_Report_Number__c, Carrier_Lookup__r.Name, DOT__c, Input_Date__c, 
                            Transaction_Date__c, Citation_Issued__c, Crash_City__c, Crash_State__c 
                            FROM Crash_Details__c
                            WHERE Carrier_Lookup__c = :parentAccount.Id OR Carrier_Lookup__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    driverFitnessViolations = [
                        SELECT Crash_Date__c, Crash_Report_Number__c, Carrier_Lookup__r.Name, DOT__c, Input_Date__c, 
                        Transaction_Date__c, Citation_Issued__c, Crash_City__c, Crash_State__c 
                        FROM Crash_Details__c
                        WHERE Carrier_Lookup__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return driverFitnessViolations;
        }
        
        private static List<Embark_MVR__c> MVRReports(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<Embark_MVR__c> embarkMVRReports = new List<Embark_MVR__c>();
            
            try {
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        embarkMVRReports = [   
                            SELECT
                            Name,
                            Driver__r.Name,
                            History_Info__c,
                            Carrier_from_Opp__c,
                            MVR_Request__r.Name,
                            Message__c,
                            Status__c,
                            MVR_Status__c,
                            CreatedDate,
                            Embark_Id__c
                            FROM Embark_MVR__c
                            WHERE Driver__r.Carrier__c = :parentAccount.Id OR Driver__r.Carrier__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    embarkMVRReports = [
                        SELECT
                        Name,
                        Driver__r.Name,
                        History_Info__c,
                        Carrier_from_Opp__c,
                        MVR_Request__r.Name,
                        MVR_Status__c,
                        Message__c,
                        Status__c,
                        CreatedDate,
                        Embark_Id__c
                        FROM Embark_MVR__c
                        WHERE Driver__r.Carrier__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return embarkMVRReports;
        }
        
        private static List<Embark_MVR__c> MVRReportsToday(
            String contactId, 
            String type
        ) {
            List<Embark_MVR__c> embarkMVRReports = new List<Embark_MVR__c>();
            
            try {
                Id checkObjectId = (Id) contactId;
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        embarkMVRReports = [   
                            SELECT
                            Name,
                            Driver__r.Name,
                            History_Info__c,
                            Carrier_from_Opp__c,
                            MVR_Request__r.Name,
                            Message__c,
                            Status__c,
                            MVR_Status__c,
                            CreatedDate,
                            Embark_Id__c
                            FROM Embark_MVR__c
                            WHERE (Driver__r.Carrier__c = :parentAccount.Id OR Driver__r.Carrier__c IN :relatedAccountIds)
                            ANd createddate = Today
                        ];
                    }
                } else {
                    embarkMVRReports = [
                        SELECT
                        Name,
                        Driver__r.Name,
                        History_Info__c,
                        Carrier_from_Opp__c,
                        MVR_Request__r.Name,
                        MVR_Status__c,
                        Message__c,
                        Status__c,
                        CreatedDate,
                        Embark_Id__c
                        FROM Embark_MVR__c
                        WHERE Driver__r.Carrier__c = :contactId
                        ANd createddate = Today
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return embarkMVRReports;
        }
        
        private static List<MVR_Request__c> MVRBatches(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<MVR_Request__c> driverFitnessViolations = new List<MVR_Request__c>();
            
            try {
                // Check if contactId is a valid contact and type is 'full'
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for MVR batches for parent and related accounts
                        driverFitnessViolations = [
                            SELECT
                            Name,
                            Status__c,
                            CreatedDate,
                            Carrier__r.Name,
                            Number_of_MVR_Reports__c,
                            Number_of_Completed_MVR_Reports__c,
                            Scheduled_Pull_Date__c
                            FROM MVR_Request__c
                            WHERE
                            Carrier__c = :parentAccount.Id
                            OR Carrier__c IN :relatedAccountIds
                        ];
                    }
                } else {
                    // Handle case where contact is not a valid contact or type is not 'full'
                    driverFitnessViolations = [
                        SELECT
                        Name,
                        Status__c,
                        CreatedDate,
                        Carrier__r.Name,
                        Number_of_MVR_Reports__c,
                        Number_of_Completed_MVR_Reports__c,
                        Scheduled_Pull_Date__c
                        FROM MVR_Request__c
                        WHERE Carrier__c = :contactId
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return driverFitnessViolations;
        }
        
        private static List<MVR_Request__c> MVRBatchesInProcess(String contactId, String type) {
            Id checkObjectId = (Id) contactId;
            List<MVR_Request__c> driverFitnessViolations = new List<MVR_Request__c>();
            
            try {
                // Check if contactId is a valid contact and type is 'full'
                if (Schema.Contact.sObjectType == checkObjectId.getSobjectType() && type == 'full') {
                    Map<String, List<Account>> accountData = getParentAndRelatedAccounts(contactId);
                    
                    // Ensure there is a parent account
                    if (accountData.get('parentAccount').size() > 0) {
                        Account parentAccount = accountData.get('parentAccount')[0];
                        List<Id> relatedAccountIds = new List<Id>();
                        
                        // Collect related account IDs
                        for (Account acc : accountData.get('relatedAccounts')) {
                            relatedAccountIds.add(acc.Id);
                        }
                        
                        // Query for MVR batches for parent and related accounts
                        driverFitnessViolations = [
                            SELECT
                            Name,
                            Status__c,
                            CreatedDate,
                            Carrier__r.Name,
                            Number_of_MVR_Reports__c,
                            Number_of_Completed_MVR_Reports__c,
                            Scheduled_Pull_Date__c
                            FROM MVR_Request__c
                            WHERE
                            (Carrier__c = :parentAccount.Id
                             OR Carrier__c IN :relatedAccountIds)
                            And Status__c = 'InProcess'
                        ];
                    }
                } else {
                    // Handle case where contact is not a valid contact or type is not 'full'
                    driverFitnessViolations = [
                        SELECT
                        Name,
                        Status__c,
                        CreatedDate,
                        Carrier__r.Name,
                        Number_of_MVR_Reports__c,
                        Number_of_Completed_MVR_Reports__c,
                        Scheduled_Pull_Date__c
                        FROM MVR_Request__c
                        WHERE Carrier__c = :contactId
                        And Status__c = 'InProcess'
                    ];
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (QueryException qe) {
                System.debug('QueryException occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (NullPointerException npe) {
                System.debug('NullPointerException occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Unexpected Exception occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            
            return driverFitnessViolations;
        }
        
        public static String getMvrPdf(String embarkId) {
            Blob pdfContent = null;
            String pdfContentbase64 = null;
            
            //embarkId = RestContext.request.params.get('Id'); // 'Id' corresponds to the query parameter in the URL
            system.debug('emabarId ' + embarkId);
            
            try {
                PageReference pdfPage = new PageReference('/apex/CDL_ViewMvrPdf?Id=' + embarkId);
                if (!Test.isRunningTest()) {
                    
                    pdfContent = pdfPage.getContentAsPDF();
                    pdfContentbase64 = EncodingUtil.base64Encode(pdfContent);
                } else {
                    pdfContent = Blob.valueOf('PDF Content');
                }
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                System.debug('Error while generating PDF: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return pdfContentbase64;
        }
        
        public static List<Embark_MVR__c> getMVRReportsOfMVRBatch(String ContactId){
            
            List<Embark_MVR__c> mvrReports = new List<Embark_MVR__c>();
            try {
                
                mvrReports.addAll([
                    SELECT Id, Driver__r.Name, Driver__r.CDL_Number__c, History_Info__c, LastModifiedDate
                    FROM Embark_MVR__c
                    WHERE MVR_Request__c =: ContactId
                    ORDER BY LastModifiedDate ASC
                ]);
                
                mvrReports.addAll([
                    SELECT Id, Driver__r.Name, Driver__r.CDL_Number__c, History_Info__c, LastModifiedDate
                    FROM Embark_MVR__c
                    WHERE MVR_Request__c =: ContactId
                    ORDER BY LastModifiedDate ASC
                ]);
                
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            } catch (Exception e) {
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            return mvrReports;
            
        }
        
        private static List<Ticket__c> getTicketDetailPage(String recordId) {
            
            List<Ticket__c> openTickets = new List<Ticket__c>();
            
            try{                      
                openTickets = [
                    SELECT
                    Name, Attorney_Full_Name__c,
                    Date_of_Ticket__c,Violation_Description__c,Attorney_Status__c, Violation_Category__c,
                    Follow_Up_Date__c, Accident__c, TicketType__c,Ticket_Comms_OK__c, Special_Comms_Req_d__c, Sticky_Sender__c, 
                    Driver_Full_Name__c,Court_Date__c, 
                    Carrier__r.Name,  Ticket_City_State__c, Drivers_License_Type__c, 
                    Ticket_County__c,
                    Ticket_Outcome__c,
                    Impact__c,
                    Notes_Portal__c,
                    Initial_Fine__c, Fine_Due_Date__c, Final_Fine__c, Fine_Notes__c, Fine_Change__c, CreatedBy.Name, CreatedDate, Ticket_Closed_Date__c, LastModifiedBy.Name, LastModifiedDate
                    FROM Ticket__c
                    WHERE
                    Id =: recordId
                    //  AND Attorney_Status__c != 'Waiting on new Court Date' 
                ]; 
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        private static List<Account> getDriverDetailPage(String recordId) {
            
            List<Account> openTickets = new List<Account>();
            
            try{                      
                openTickets = [
                    SELECT Id, 
                    Name, Carrier__r.Name ,
                    Carrier_s_Driver_ID__c,
                    Active__c,
                    Synced_with_abenity__c,
                    Abenity_Status__c,
                    Abenity_Failure_Message__c,
                    Abenity_Failure_Message__pc,
                    Synced_with_abenity__pc,
                    Abenity_Status__pc,
                    Abenity_Access__pc,
                    Message_Body__pc,
                    Text_from_Number__pc,
                    Carrier_Account__pr.Name,
                    Marketing_Message_Sent__pc,
                    Marketing_Contact_Type__pc,
                    Last_Rollup_Sync__c,
                    Fetch_Inspections__c,
                    Sticky_Sender__c,
                    Sticky_Sender__pc,
                    Member__c,
                    Active_Until__c,
                    CDL_Number__c,
                    PersonMobilePhone,
                    CDL_State__c,
                    PersonEmail, PersonBirthdate, Last_4_of_SS__c, CDL_Expiration_Date__c, Med_Cert_Expiration_Date__c, BillingAddress,
                    PersonMailingAddress, Spouse_First_Name__c, Spouse_Last_Name__c, Spouse_Cell_Number__c, Spouse_Email__c,
                    Owner.Name,LastModifiedBy.Name, LastModifiedDate
                    FROM Account
                    WHERE IsPersonAccount = TRUE 
                    AND Id =:recordId 
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        
        private static List<SMS_Notify_Insp__c> getSMSNotifyDetailPage(String recordId) {
            
            List<SMS_Notify_Insp__c> openTickets = new List<SMS_Notify_Insp__c>();
            
            try{                      
                openTickets = [
                    SELECT Id,Insp_Report__c,Insp_Date__c,Insp_Level_Desc__c,Inspection_Time__c,Insp_Total_OOS_Violations__c,
                    Insp_Level__c,Carrier_Lookup__r.Name,Post_Crash_Insp__c,Violation_Count__c,DOT__c,Clean_Insp__c,Citation_Count__c,
                    Driver_Name__c,Driver_License_St__c,Driver_DOB__c,Driver_License_ID__c,Member_Status__c,Driver_Lookup__c,
                    Insp_Location__c,Insp_Location_Code__c,Insp_State__c,
                    CreatedBy.Name,Insp_Post_Date__c,Name,LastModifiedBy.Name,OwnerId,Inspection_ID_Notify_Insp__c,Email_Sent__c FROM SMS_Notify_Insp__c
                    Where Id =: recordId
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        private static List<SMS_Inspection_Data__c> getSMSInspectionDataDetailPage(String recordId) {
            
            List<SMS_Inspection_Data__c> openTickets = new List<SMS_Inspection_Data__c>();
            
            try{                      
                openTickets = [
                    SELECT Report_Number__c,Report_Number_with_State__c, Inspection_Date__c,Report_State__c,Inspection_Level_ID__c,
                    BASIC_Violation__c,Driver_Name__r.Name, Account__r.name,Time_Weight__c,Unique_ID__c, Driver_OOS__c,
                    Archived__c,Vehicle_OOS_Total__c,DR_Fitness_Violation__c,Unsafe_Violation__c, Vehicle_Maintenance_Violation__c,
                    Fatigued_Violation__c, Subt_Alcohol_Violation__c, HM_Violation__c,Unit_Make__c,Unit_Type_Desc__c, Unit_License_State__c,
                    Unit_License__c, VIN__c, Unit_Decal_Number__c,Unit_Make2__c,Unit_Type_Desc2__c,Unit_License_State2__c,Unit_License2__c,
                    VIN2__c,Unit_Decal_Number2__c,Hazmat_Placard_Req__c,Total_HAZMAT__c, Hazmat_OOS_Total__c, CreatedBy.Name,CreatedById,
                    CreatedDate, LastModifiedBy.Name, LastModifiedDate
                    FROM SMS_Inspection_Data__c 
                    Where Id =: recordId
                ];
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        
        private static List<SMS_Violation_Data__c> getViolationDataDetailPage(String recordId) {
            
            List<SMS_Violation_Data__c> openTickets = new List<SMS_Violation_Data__c>();
            
            try{                      
                openTickets = [
                    SELECT Id,Name,Inspection_Date__c,BASIC_Description_Formula__c,Driver_Name__c,Unique_ID__c,Carrier_from_Insp__c,Report_Number_Violation_Code__c, Violation_Code__c,	
                    Basic_Description__c,Violation_Unit__c,Section_Description__c,Group_Description__c,Violation_Code_Link__c,Archived__c,
                    Severity_Weight__c,Time_Weight_Calculated__c,OOS_Indicator__c,OOS_Weight__c,
                    CreatedBy.Name,LastModifiedBy.Name,CreatedDate, LastModifiedDate
                    FROM SMS_Violation_Data__c
                    Where Id =: recordId
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        private static List<Inspection__c> getInspectionDetailPage(String recordId) {
            
            List<Inspection__c> openTickets = new List<Inspection__c>();
            
            try{                      
                openTickets = [
                    SELECT Id,Driver__c,Status__c,Carrier__c,Follow_Up_Date_Insp__c,Challenge_Type__c,Inspection_Notes__c, 
                    Driver_Name__c, Carrier_Name__c, LastModifiedDate, CreatedDate,
                    Ticket_Fine_Amount__c,Ticket_Fine_Due_Date__c,
                    DataQ_Link__c,DataQ_ID__c,DataQ_Outcome__c,DataQ_Final_Report_Link__c,
                    Associated_Ticket__r.Name,Ticket_Date__c,Ticket_Flow__c,Ticket_State_from_Ticket__c,Ticket_Violation_Description__c,Ticket_Outcome__c,Ticket_Type__c,
                    SMS_Inspection_Data__c,SMS_Report_Number__c,SMS_Inspection_Date__c,SMS_Insp_Violations__c,
                    Do_Not_Count_Toward_Used_Challenge__c,LastModifiedBy.Name,CreatedBy.Name
                    FROM Inspection__c 
                    Where Id =: recordId
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        private static List<Account> getCarrierDetailPage(String recordId) {
            
            List<Account> openTickets = new List<Account>();
            
            try{                      
                openTickets = [
                    SELECT Id, 
                    Name,Parent.Name,Type, Phone, Website, Landing_Page__c, Synced_with_abenity__c, High_Risk__c, Abenity_Status__c, Abenity_Failure_Message__c,
                    Last_Rollup_Sync__c, Has_an_active_portal_user__c, Fetch_Inspections__c, Sticky_Sender__c, DOT__c, Trucks__c, Years_in_Business__c,
                    Company_Drivers__c, NumberOfEmployees, Owner_Operators__c, Company_Snapshot__c, Interstate__c, FMCSA_Report_Record__c,
                    BillingAddress, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry,
                    Payer__c, Payment_Schedule__c, Billing_Terms__c, Payment_Frequency__c, Payroll_Frequency__c, Day_of_Payroll__c, Payment_Terms__c, Coverage_Terms__c, 
                    Owner.Name,LastModifiedBy.Name, LastModifiedDate, Lead_Source_Global__c
                    
                    FROM Account
                    WHERE 
                    Id =:recordId 
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        private static List<MVR_Request__c> getMVRRequestDetailPage(String recordId) {
            
            List<MVR_Request__c> openTickets = new List<MVR_Request__c>();
            
            try{                      
                openTickets = [
                    SELECT Id, 
                    Name, Scheduled_Pull_Date__c, Number_of_MVR_Reports__c, Status__c, Number_of_Completed_MVR_Reports__c, 
                    Owner.Name,LastModifiedBy.Name, LastModifiedDate
                    FROM MVR_Request__c
                    Where Id =: recordId
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
        private static List<Embark_MVR__c> getMVRReportDetailPage(String recordId) {
            
            List<Embark_MVR__c> openTickets = new List<Embark_MVR__c>();
            
            try{                      
                openTickets = [
                    SELECT Id, 
                    Name,Driver__r.Name, Driver_State__c, Status__c, History_Info__c, 
                    Owner.Name,LastModifiedBy.Name, LastModifiedDate
                    FROM Embark_MVR__c 
                    where Id =: recordId
                ];
                Logger.info('Request Successfull').setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(QueryException qe){
                system.debug('Error occurred: ' + qe.getMessage());
                Logger.error(qe.getMessage(), qe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            catch(NullPointerException npe){
                system.debug('Error occurred: ' + npe.getMessage());
                Logger.error(npe.getMessage(), npe).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
                
            }
            catch(Exception e){
                system.debug('Error occurred: ' + e.getMessage());
                Logger.error(e.getMessage(), e).setRestRequestDetails(RestContext.request).setRestResponseDetails(RestContext.response);
                Logger.saveLog();
            }
            System.debug('Queried Open Tickets: ' + openTickets);
            
            
            return openTickets;
        }
        
    }